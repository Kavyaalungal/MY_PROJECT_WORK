BILL WISE COLLECTION


// import React, { useState } from 'react';
// import {
//   Grid,
//   TextField,
//   FormControl,
//   FormControlLabel,
//   RadioGroup,
//   Radio,
//   Typography,
//   Paper,
//   Box,
//   Container,
//   TableContainer,
//   Table,
//   TableHead,
//   TableRow,
//   TableCell,
//   TableBody,
//   Stack
// } from '@mui/material';
// import { CButton,CCard } from '@coreui/react';



// const Bill = () => {
//   const [collectionType, setCollectionType] = useState('lab');
//   const rows = [
//     { id: 1, col1: 'Data 1', col2: 'Data 2', col3: 'Data 3', col4: 'Data 4', col5: 'Data 5', col6: 'Data 6', col7: 'Data 7' },
//     { id: 2, col1: 'Data 8', col2: 'Data 9', col3: 'Data 10', col4: 'Data 11', col5: 'Data 12', col6: 'Data 13', col7: 'Data 14' },
//     { id: 3, col1: 'Data 15', col2: 'Data 16', col3: 'Data 17', col4: 'Data 18', col5: 'Data 19', col6: 'Data 20', col7: 'Data 21' },
//     { id: 4, col1: 'Data 22', col2: 'Data 23', col3: 'Data 24', col4: 'Data 25', col5: 'Data 26', col6: 'Data 27', col7: 'Data 28' }
//   ];

//   return (
//      <CCard className="mb-4">
//     <Box display="flex" justifyContent="center" alignItems="center" height="100vh" padding="16px">
//       <Container component="main" maxWidth="md" className="mb-4 mt-2 ">
//         <Paper elevation={3} style={{ padding: '16px', borderRadius: '15px' }}>
//           <Box sx={{ padding: 2 }}>
//             <Grid container spacing={2} alignItems="center">
//               <Grid item xs={12} md={8}>
//                 <Typography
//                   variant="h6"
//                   sx={{
//                     margin: 0,
//                     fontSize: '24px',
//                     fontWeight: 'bold',
//                     color: '#599eb4',
//                   }}
//                 >
//                   BILL WISE COLLECTION
//                 </Typography>
//               </Grid>
//               <Grid item xs={12} md={4}>
//                 <Stack
//                   direction={{ xs: 'column', md: 'row' }}
//                   spacing={2}
//                   justifyContent={{ xs: 'center', md: 'flex-end' }}
//                 >
//                   <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                     FETCH
//                   </CButton>
//                   <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                     PRINT
//                   </CButton>
//                   <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                     NEW
//                   </CButton>
//                   <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                     SAVE
//                   </CButton>
//                   <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                     EXIT
//                   </CButton>
//                 </Stack>
//               </Grid>
//             </Grid>
//           </Box>
//           <hr />
//           <Grid container spacing={2}>
//             <Grid item xs={6} sm={6} md={6}>
//               <FormControl component="fieldset">
//                 <RadioGroup row value={collectionType} onChange={(e) => setCollectionType(e.target.value)}>
//                   <FormControlLabel
//                     value="lab"
//                     control={<Radio size="small" />}
//                     label={<Typography variant="body2">Lab Collection</Typography>}
//                     sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                   />
//                   <FormControlLabel
//                     value="purchase"
//                     control={<Radio size="small" />}
//                     label={<Typography variant="body2">Purchase</Typography>}
//                     sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                   />
//                   <FormControlLabel
//                     value="pharmacy"
//                     control={<Radio size="small" />}
//                     label={<Typography variant="body2">Pharmacy Collection</Typography>}
//                     sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                   />
//                 </RadioGroup>
//               </FormControl>
//             </Grid>

//             <Grid item xs={6} sm={6} md={6}>
//               <FormControl component="fieldset">
//                 <RadioGroup row value={collectionType} onChange={(e) => setCollectionType(e.target.value)}>
//                   <FormControlLabel
//                     value="cash"
//                     control={<Radio size="small" />}
//                     label={<Typography variant="body2">Cash</Typography>}
//                     sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                   />
//                   <FormControlLabel
//                     value="cheque"
//                     control={<Radio size="small" />}
//                     label={<Typography variant="body2">Cheque</Typography>}
//                     sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                   />
//                   <FormControlLabel
//                     value="bhim"
//                     control={<Radio size="small" />}
//                     label={<Typography variant="body2">BHIM/UPI Online Payment</Typography>}
//                     sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                   />
//                 </RadioGroup>
//               </FormControl>
//             </Grid>
//             <Grid item xs={12} sm={6}>
//               <TextField
//                 id="corporate"
//                 label="Corporate"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 InputLabelProps={{ style: { fontSize: '14px' } }}
//               />
//             </Grid>

//             <Grid item xs={12} md={6}></Grid>

//             <Grid item xs={12} md={3}>
//               <TextField
//                 id="from"
//                 label="FromDate"
//                 type="date"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
//               />
//             </Grid>

//             <Grid item xs={12} md={9}></Grid>
//             <Grid item xs={12} md={3}>
//               <TextField
//                 id="out"
//                 label="Out"
//                 type="date"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
//               />
//             </Grid>
//             <Grid item xs={12} md={3}>
//               <TextField
//                 id="date"
//                 label="Date"
//                 type="date"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
//               />
//             </Grid>
//             <Grid item xs={12} sm={6}>
         
//             </Grid>
//             <Grid item xs={12} md={3}>
//                      <TextField
//                 id="amount"
//                 label="Amount"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//                 InputLabelProps={{ style: { fontSize: '14px' } }}
//               />
//             </Grid>
//             <Grid item xs={12} md={3}>
//             <CButton color="primary" style={{ width: '100%', maxWidth: { xs: '100%', sm: 'auto' } }}>
//                     Allocate
//                   </CButton>      
//             </Grid>
//             <Grid item xs={12}>
//               <TableContainer style={{ maxHeight: 'calc(100vh - 400px)', overflowY: 'auto' }}>
//                 <Table stickyHeader aria-label="sticky table">
//                   <TableHead>
//                     <TableRow>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>SlNo</TableCell>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Lab</TableCell>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Date</TableCell>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Select</TableCell>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Patient</TableCell>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Amount</TableCell>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Balance</TableCell>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Allocated.Amt</TableCell>
//                       <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Current.Bal</TableCell>
//                     </TableRow>
//                   </TableHead>
//                   <TableBody>
//                     {rows.map((row) => (
//                       <TableRow key={row.id}>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.id}</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col1}</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col2}</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col3}</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col4}</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col5}</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col6}</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col7}</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col7}</TableCell>
//                       </TableRow>
//                     ))}
//                   </TableBody>
//                 </Table>
//               </TableContainer>
//             </Grid>
//           </Grid>
//         </Paper>
//       </Container>
//     </Box>
//      </CCard>
//   );
// };

// export default Bill;


// import React, { useState } from 'react';
// import {
//   Grid,
//   TextField,
//   FormControl,
//   FormControlLabel,
//   RadioGroup,
//   Radio,
//   Typography,
//   Paper,
//   Box,
//   Container,
//   TableContainer,
//   Table,
//   TableHead,
//   TableRow,
//   TableCell,
//   TableBody,
//   Stack
// } from '@mui/material';
// import { CButton, CCard } from '@coreui/react';

// const Bill = () => {
//   const [collectionType, setCollectionType] = useState('lab');
//   const rows = [
//     { id: 1, col1: 'Data 1', col2: 'Data 2', col3: 'Data 3', col4: 'Data 4', col5: 'Data 5', col6: 'Data 6', col7: 'Data 7' },
//     { id: 2, col1: 'Data 8', col2: 'Data 9', col3: 'Data 10', col4: 'Data 11', col5: 'Data 12', col6: 'Data 13', col7: 'Data 14' },
//     { id: 3, col1: 'Data 15', col2: 'Data 16', col3: 'Data 17', col4: 'Data 18', col5: 'Data 19', col6: 'Data 20', col7: 'Data 21' },
//     { id: 4, col1: 'Data 22', col2: 'Data 23', col3: 'Data 24', col4: 'Data 25', col5: 'Data 26', col6: 'Data 27', col7: 'Data 28' }
//   ];

//   return (
//     <CCard className="mb-4">
//       <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh" padding="16px">
//         <Container component="main" maxWidth="lg">
//           <Paper elevation={3} style={{ padding: '16px', borderRadius: '15px' }}>
//             <Box sx={{ padding: 2 }}>
//               <Grid container spacing={2} alignItems="center">
//                 <Grid item xs={12} md={8}>
//                   <Typography
//                     variant="h6"
//                     sx={{
//                       margin: 0,
//                       fontSize: '24px',
//                       fontWeight: 'bold',
//                       color: '#599eb4',
//                     }}
//                   >
//                     BILL WISE COLLECTION
//                   </Typography>
//                 </Grid>
//                 <Grid item xs={12} md={4}>
//                   <Stack
//                     direction={{ xs: 'column', md: 'row' }}
//                     spacing={2}
//                     justifyContent={{ xs: 'center', md: 'flex-end' }}
//                   >
//                     <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                       FETCH
//                     </CButton>
//                     <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                       PRINT
//                     </CButton>
//                     <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                       NEW
//                     </CButton>
//                     <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                       SAVE
//                     </CButton>
//                     <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
//                       EXIT
//                     </CButton>
//                   </Stack>
//                 </Grid>
//               </Grid>
//             </Box>
//             <hr />
//             <Grid container spacing={2}>
//               <Grid item xs={12} sm={6} md={4}>
//                 <FormControl component="fieldset">
//                   <RadioGroup row value={collectionType} onChange={(e) => setCollectionType(e.target.value)}>
//                     <FormControlLabel
//                       value="lab"
//                       control={<Radio size="small" />}
//                       label={<Typography variant="body2">Lab Collection</Typography>}
//                       sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                     />
//                     <FormControlLabel
//                       value="purchase"
//                       control={<Radio size="small" />}
//                       label={<Typography variant="body2">Purchase</Typography>}
//                       sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                     />
//                     <FormControlLabel
//                       value="pharmacy"
//                       control={<Radio size="small" />}
//                       label={<Typography variant="body2">Pharmacy Collection</Typography>}
//                       sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                     />
//                   </RadioGroup>
//                 </FormControl>
//               </Grid>
//               <Grid item xs={12} sm={6} md={4}>
//                 <FormControl component="fieldset">
//                   <RadioGroup row value={collectionType} onChange={(e) => setCollectionType(e.target.value)}>
//                     <FormControlLabel
//                       value="cash"
//                       control={<Radio size="small" />}
//                       label={<Typography variant="body2">Cash</Typography>}
//                       sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                     />
//                     <FormControlLabel
//                       value="cheque"
//                       control={<Radio size="small" />}
//                       label={<Typography variant="body2">Cheque</Typography>}
//                       sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                     />
//                     <FormControlLabel
//                       value="bhim"
//                       control={<Radio size="small" />}
//                       label={<Typography variant="body2">BHIM/UPI Online Payment</Typography>}
//                       sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                     />
//                   </RadioGroup>
//                 </FormControl>
//               </Grid>
//               <Grid item xs={12} sm={12} md={4}>
//                 <TextField
//                   id="corporate"
//                   label="Corporate"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//               </Grid>
//               <Grid item xs={12} sm={6} md={3}>
//                 <TextField
//                   id="from"
//                   label="From Date"
//                   type="date"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
//                 />
//               </Grid>
//               <Grid item xs={12} sm={6} md={3}>
//                 <TextField
//                   id="out"
//                   label="Out"
//                   type="date"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
//                 />
//               </Grid>
//               <Grid item xs={12} sm={6} md={3}>
//                 <TextField
//                   id="date"
//                   label="Date"
//                   type="date"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
//                 />
//               </Grid>
//               <Grid item xs={12} sm={6} md={3}>
//                 <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//               </Grid>
//               <Grid item xs={12}>
//                 <CButton color="primary" style={{ width: '100%', maxWidth: { xs: '100%', sm: 'auto' } }}>
//                   Allocate
//                 </CButton>
//               </Grid>
//               <Grid item xs={12}>
//                 <TableContainer style={{ maxHeight: 'calc(100vh - 400px)', overflowY: 'auto' }}>
//                   <Table stickyHeader aria-label="sticky table">
//                     <TableHead>
//                       <TableRow>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>SlNo</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Lab</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Date</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Select</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Patient</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Amount</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Balance</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Allocated.Amt</TableCell>
//                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Current.Bal</TableCell>
//                       </TableRow>
//                     </TableHead>
//                     <TableBody>
//                       {rows.map((row) => (
//                         <TableRow key={row.id}>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.id}</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col1}</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col2}</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col3}</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col4}</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col5}</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col6}</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col7}</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col7}</TableCell>
//                         </TableRow>
//                       ))}
//                     </TableBody>
//                   </Table>
//                 </TableContainer>
//               </Grid>
//             </Grid>
//           </Paper>
//         </Container>
//       </Box>
//     </CCard>
//   );
// };

// export default Bill;

import React, { useState } from 'react';
import {
  Grid,
  TextField,
  FormControl,
  FormControlLabel,
  RadioGroup,
  Radio,
  Typography,
  Paper,
  Box,
  Container,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Stack,
  IconButton
} from '@mui/material';
import { CButton, CCard, CCardBody } from '@coreui/react';
import MoreHorizIcon from '@mui/icons-material/MoreHoriz';

const Bill = () => {
  const [collectionType, setCollectionType] = useState('lab');
  const rows = [
    { id: 1, col1: 'Data 1', col2: 'Data 2', col3: 'Data 3', col4: 'Data 4', col5: 'Data 5', col6: 'Data 6', col7: 'Data 7' },
    { id: 2, col1: 'Data 8', col2: 'Data 9', col3: 'Data 10', col4: 'Data 11', col5: 'Data 12', col6: 'Data 13', col7: 'Data 14' },
    { id: 3, col1: 'Data 15', col2: 'Data 16', col3: 'Data 17', col4: 'Data 18', col5: 'Data 19', col6: 'Data 20', col7: 'Data 21' },
    { id: 4, col1: 'Data 22', col2: 'Data 23', col3: 'Data 24', col4: 'Data 25', col5: 'Data 26', col6: 'Data 27', col7: 'Data 28' }
  ];

  return (
    <CCard className="mb-4">
    <CCardBody>
      <Box sx={{ padding: 2 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} md={8}>
            <Typography
              variant="h6"
              sx={{
                margin: 0,
                fontSize: '24px',
                fontWeight: 'bold',
                color: ' #599eb4 ',
              }}
            >
              CANCEL INVOICE
            </Typography>
          </Grid>
          <Grid item xs={12} md={4}>
            <Box sx={{ display: 'flex', justifyContent: { xs: 'center', md: 'flex-end' }, gap: '16px' }}>
              <CButton
                color='primary'
                style={{
                  width: '100%',
                  maxWidth: { xs: '100%', sm: 'auto' },
                }}
              >
                NEW
              </CButton>
              <CButton
                color="primary"
                style={{
                  width: '100%',
                  maxWidth: { xs: '100%', sm: 'auto' },
                }}
              >
                SAVE
              </CButton>
              <CButton
                color="primary"
                style={{
                  width: '100%',
                  maxWidth: { xs: '100%', sm: 'auto' },
                }}
              >
                EXIT
              </CButton>
            </Box>
          </Grid>
        </Grid>
      </Box>
      <hr/>
      {/* <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh" padding="16px"> */}
        {/* <Container component="main" maxWidth="md" className=""> */}
          {/* <Paper elevation={3} style={{ padding: '16px', borderRadius: '15px' }}> */}
          {/* <Box sx={{ padding: 2 }}> */}
              {/* <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} md={4}>
                  <Typography
                    variant="h6"
                    sx={{
                      margin: 0,
                      fontSize: '24px',
                      fontWeight: 'bold',
                      color: '#599eb4',
                    }}
                  >
                    BILL COLLECTION
                  </Typography>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Stack
                    direction={{ xs: 'column', md: 'row' }}
                    spacing={2}
                    alignItems={{ xs: 'column', md: 'flex-end' }}
                  >
                    <CButton color="primary" sx={{ width: '100%', maxWidth: '100%' }}>
                      FETCH
                    </CButton>
                    <CButton color="primary" sx={{ width: '100%', maxWidth: '100%' }}>
                      PRINT
                    </CButton>
                    <CButton color="primary" sx={{ width: '100%', maxWidth: '100%' }}>
                      NEW
                    </CButton>
                    <CButton color="primary" sx={{ width: '100%', maxWidth: '100%' }}>
                      SAVE
                    </CButton>
                    <CButton color="primary" sx={{ width: '100%', maxWidth: '100%' }}>
                      EXIT
                    </CButton>
                  </Stack>
                </Grid>
              </Grid>
            </Box>
            <hr /> */}
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6} md={6}>
                <FormControl component="fieldset">
                  <RadioGroup row value={collectionType} onChange={(e) => setCollectionType(e.target.value)}>
                    <FormControlLabel
                      value="lab"
                      control={<Radio size="small" />}
                      label={<Typography variant="body2">Lab Collection</Typography>}
                      sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
                    />
                    <FormControlLabel
                      value="purchase"
                      control={<Radio size="small" />}
                      label={<Typography variant="body2">Purchase</Typography>}
                      sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
                    />
                    <FormControlLabel
                      value="pharmacy"
                      control={<Radio size="small" />}
                      label={<Typography variant="body2">Pharmacy Collection</Typography>}
                      sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
                    />
                  </RadioGroup>
                </FormControl>
              </Grid>

              <Grid item xs={12} sm={6} md={6}>
                <FormControl component="fieldset">
                  <RadioGroup row value={collectionType} onChange={(e) => setCollectionType(e.target.value)}>
                    <FormControlLabel
                      value="cash"
                      control={<Radio size="small" />}
                      label={<Typography variant="body2">Cash</Typography>}
                      sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
                    />
                    <FormControlLabel
                      value="cheque"
                      control={<Radio size="small" />}
                      label={<Typography variant="body2">Cheque</Typography>}
                      sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
                    />
                    <FormControlLabel
                      value="bhim"
                      control={<Radio size="small" />}
                      label={<Typography variant="body2">BHIM/UPI Online Payment</Typography>}
                      sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
                    />
                  </RadioGroup>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  id="corporate"
                  label="Corporate"
                  variant="outlined"
                  size="small"
                  fullWidth
                  InputLabelProps={{ style: { fontSize: '14px' } }}
                />
              </Grid>
              <IconButton color="primary">
              <MoreHorizIcon />
            </IconButton>

              <Grid item xs={12} md={3}>
                <TextField
                  id="from"
                  label="FromDate"
                  type="date"
                  variant="outlined"
                  size="small"
                  fullWidth
                  InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
                />
              </Grid>

              <Grid item xs={12} md={3}>
                <TextField
                  id="out"
                  label="Out"
                  type="date"
                  variant="outlined"
                  size="small"
                  fullWidth
                  InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <TextField
                  id="date"
                  label="Date"
                  type="date"
                  variant="outlined"
                  size="small"
                  fullWidth
                  InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <TextField
                  id="amount"
                  label="Amount"
                  variant="outlined"
                  size="small"
                  fullWidth
                  InputLabelProps={{ style: { fontSize: '14px' } }}
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <CButton color="primary" style={{ width: '100%', maxWidth: 'auto' }}>
                  Allocate
                </CButton>
              </Grid>
              <Grid item xs={12}>
                <TableContainer style={{ maxHeight: 'calc(100vh - 400px)', overflowY: 'auto' }}>
                  <Table stickyHeader aria-label="sticky table">
                    <TableHead>
                      <TableRow>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>SlNo</TableCell>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Lab</TableCell>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Date</TableCell>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Select</TableCell>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Patient</TableCell>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Amount</TableCell>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Balance</TableCell>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Allocated.Amt</TableCell>
                        <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding:'8px' }}>Current.Bal</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {rows.map((row) => (
                        <TableRow key={row.id}>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.id}</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col1}</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col2}</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col3}</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col4}</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col5}</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col6}</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col7}</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col7}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>
            </Grid>
          {/* </Paper> */}
        {/* </Container> */}
      {/* </Box> */}
      </CCardBody>
     </CCard>
  );
};

export default Bill;

// ACCOUNT LEDGER

// import React from 'react';
// import {
//   Box,
//   Button,
//   TextField,
//   FormControlLabel,
//   FormControl,
//   InputLabel,
//   Select,
//   Checkbox,
//   Grid,
//   Typography,
//   Paper,
//   MenuItem,
//   IconButton,
// } from '@mui/material';
// import MoreHorizIcon from '@mui/icons-material/MoreHoriz';
// import { CButton, CCard } from '@coreui/react';

// const Account = () => {
//   return (
//     <>
//      {/* <Paper elevation={3} sx={{ padding: 4, maxWidth: 800, margin: 'auto',marginBottom:'30px' }}> */}
//       <Box sx={{ padding: 2 }}>
//       <Grid container spacing={2} alignItems="center">
//         <Grid item xs={12} md={8}>
//           <Typography
//             variant="h6"
//             sx={{
//               margin: 0,
//               fontSize: '24px',
//               fontWeight: 'bold',
//               color: ' #599eb4 ',
//             }}
//           >
//             CANCEL INVOICE
//           </Typography>
//         </Grid>
//         <Grid item xs={12} md={4}>
//           <Box sx={{ display: 'flex', justifyContent: { xs: 'center', md: 'flex-end' }, gap: '16px' }}>
//             <CButton
//             color='primary'
//             style={{
//                 width:'100%',
//                 maxWidth:{xs:'100%', sm: 'auto'},
//             }}
//             >
//                 NEW
//             </CButton>
//             <CButton
//               color="primary"
//               style={{
//                 width: '100%',
//                 maxWidth: { xs: '100%', sm: 'auto' },
//               }}
//             >
//               SAVE
//             </CButton>
//             <CButton
//               color="primary"
//               style={{
//                 width: '100%',
//                 maxWidth: { xs: '100%', sm: 'auto' },
//               }}
//             >
//               EXIT
//             </CButton>
//           </Box>
//         </Grid>
//       </Grid>
//     </Box>
//             <hr/>
//       <Grid container spacing={3}>
//         <Grid item xs={12}>
//           <Box sx={{ display: 'flex', alignItems: 'center' }}>
//           <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//             <IconButton color="primary">
//               <MoreHorizIcon />
//             </IconButton>
//           </Box>
//         </Grid>
//         <Grid item xs={12}>
//           <Box sx={{ display: 'flex', alignItems: 'center' }}>
//           <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//             <IconButton color="primary">
//               <MoreHorizIcon />
//             </IconButton>
//           </Box>
//         </Grid>
//         <Grid item xs={12}>
//           <Box sx={{ display: 'flex', alignItems: 'center' }}>
//           <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//             <IconButton color="primary">
//               <MoreHorizIcon />
//             </IconButton>
//           </Box>
//         </Grid>
//         <Grid item xs={12}>
//           <Box sx={{ display: 'flex', alignItems: 'center' }}>
//           <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//             <IconButton color="primary">
//               <MoreHorizIcon />
//             </IconButton>
//           </Box>
//         </Grid>
//         <Grid item xs={6}>
//           <Box sx={{ display: 'flex', alignItems: 'center' }}>
//           <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//             <IconButton color="primary">
//               <MoreHorizIcon />
//             </IconButton>
//           </Box>
//         </Grid>
//         <Grid item xs={12} sm={6}>
//           <FormControlLabel control={<Checkbox />} label="Avoid Letter Head" />
//         </Grid>
//         <Grid item xs={3} sm={6}>
//           <Box sx={{ display: 'flex', alignItems: 'center' }}>
//           <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//           </Box>
//         </Grid>
//         <Grid item xs={12} sm={3}>
//                  <FormControl variant="outlined" size="small" fullWidth>
//                    <InputLabel id="genderLabel"></InputLabel>
//                    <Select
//                      labelId="genderLabel"
//                      id="gender"
//                      label="Gender"
//                    >
//                      {/* <MenuItem value=""><em>JEEVA</em></MenuItem> */}
//                      <MenuItem value="M">Male</MenuItem>
//                      <MenuItem value="F">Female</MenuItem>
//                      <MenuItem value="O">Other</MenuItem>
//                    </Select>
//                  </FormControl>
//                </Grid>
//                <Grid item xs={3}>
//           <Box sx={{ display: 'flex', alignItems: 'center' }}>
//           <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//           </Box>
//         </Grid>
//         <Grid item xs={3}>
//           <Box sx={{ display: 'flex', alignItems: 'center' }}>
//           <TextField
//                   id="amount"
//                   label="Amount"
//                   variant="outlined"
//                   size="small"
//                   fullWidth
//                   InputLabelProps={{ style: { fontSize: '14px' } }}
//                 />
//           </Box>
//         </Grid>
//         <Grid item xs={12} sm={12}>
//               <TextField
//                 id="reason"
//                 label="Reason"
//                 variant="outlined"
//                 size="small"
//                 fullWidth
//               multiline
//               rows={5}
//                 InputLabelProps={{ style: { fontSize: '16px' } }}
//               />
//             </Grid>

//             <Grid item xs={12} sm={6}>
//           <TextField 
//           id='area'
//           label="Area"
//           fullWidth
//           variant="outlined"
//           size='small'
//           InputLabelProps={{style:{fontSize:'16px'}}}
//           />
//         </Grid>
//         <Grid item xs={12} sm={6}>
//                  <FormControl variant="outlined" size="small" fullWidth>
//                    <InputLabel id="genderLabel"></InputLabel>
//                    <Select
//                      labelId="genderLabel"
//                      id="gender"
//                      label="Gender"
//                    >
//                      {/* <MenuItem value=""><em>JEEVA</em></MenuItem> */}
//                      <MenuItem value="M">Male</MenuItem>
//                      <MenuItem value="F">Female</MenuItem>
//                      <MenuItem value="O">Other</MenuItem>
//                    </Select>
//                  </FormControl>
//                </Grid>
       
//         <Grid item xs={6}>
//           <TextField 
//           id='phone'
//           label="phone"
//           fullWidth
//           variant="outlined"
//           size='small'
//           InputLabelProps={{style: {fontSize:'16px'}}}
//           />
//         </Grid>
//         <Grid item xs={12} sm={6}>
//           <TextField
//           id='mobile' 
//           label="Mobile"
//           fullWidth 
//           variant="outlined"
//           size='small'
//           InputLabelProps={{style:{fontSize:'16px'}}}
//            />
//         </Grid>
//         <Grid item xs={12} sm={6}>
//           <TextField
//           id='email'
//           label="Email"
//           fullWidth
//           size='small'
//           variant="outlined"
//           InputLabelProps={{style:{fontSize:'16px'}}} 
//           />
//         </Grid>
//         <Grid item xs={12} sm={6}>
//           <FormControlLabel control={<Checkbox />} label="Email Report" />
//           <FormControlLabel control={<Checkbox />} label="Is Active" />
//         </Grid>
//         <Grid item xs={12} sm={6}>
//           <TextField 
//           id='discount'
//           label="Discount%"
//           fullWidth 
//           variant="outlined"
//           size='small'
//           InputLabelProps={{style:{fontSize:'16px'}}}
//            />
//         </Grid>
//         <Grid item xs={12} sm={6}>
//          <TextField
//          id='test'
//          label="TestDiscount%"
//          fullWidth
//          variant='outlined'
//          size='small'
//          InputLabelProps={{style: { fontSize:'16PX'}}}
//          />
//         </Grid>
//         <Grid item xs={12} sm={12}>
//             <FormControl variant='outlined' size='small' fullWidth>
//                 <InputLabel id="payment">Pay Mode</InputLabel>
//                 <Select
//                 labelId='payment'
//                 id='payment'
//                 label="Pay Mode" 
//                 >
//                     <MenuItem value='cash'>Cash</MenuItem>
//                     <MenuItem value='UPI'>UPI</MenuItem>
//                     <MenuItem value='Netbanking'>Net Banking</MenuItem>
//                 </Select>

//             </FormControl>

//         </Grid>
//         <Grid item xs={12}>
//           <TextField
//           id='description' 
//           label="Description" 
//           fullWidth 
//           multiline 
//           rows={5} 
//           variant="outlined"
//           size='small'
//           InputLabelProps={{style: {fontSize:'16px'}}}
//            />
//         </Grid>
//         <Grid item xs={12} sm={6}>
//                  <FormControl variant="outlined" size="small" fullWidth>
//                    <InputLabel id="genderLabel"></InputLabel>
//                    <Select
//                      labelId="genderLabel"
//                      id="gender"
//                      label="Gender"
//                    >
//                      {/* <MenuItem value=""><em>JEEVA</em></MenuItem> */}
//                      <MenuItem value="M">Male</MenuItem>
//                      <MenuItem value="F">Female</MenuItem>
//                      <MenuItem value="O">Other</MenuItem>
//                    </Select>
//                  </FormControl>
//                </Grid>
       
//       </Grid>

//     {/* </Paper> */}
//     </>
//   );
// };

// export default Account;


import React from 'react';
import {
  Box,
  Button,
  TextField,
  FormControlLabel,
  FormControl,
  InputLabel,
  Select,
  Checkbox,
  Grid,
  Typography,
  Paper,
  MenuItem,
  IconButton,
} from '@mui/material';
import MoreHorizIcon from '@mui/icons-material/MoreHoriz';
import { CButton, CCard, CCardBody } from '@coreui/react';

const Account = () => {
  return (
    <CCard className="mb-4">
      <CCardBody>
        <Box sx={{ padding: 2 }}>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} md={8}>
              <Typography
                variant="h6"
                sx={{
                  margin: 0,
                  fontSize: '24px',
                  fontWeight: 'bold',
                  color: ' #599eb4 ',
                }}
              >
                CANCEL INVOICE
              </Typography>
            </Grid>
            <Grid item xs={12} md={4}>
              <Box sx={{ display: 'flex', justifyContent: { xs: 'center', md: 'flex-end' }, gap: '16px' }}>
                <CButton
                  color='primary'
                  style={{
                    width: '100%',
                    maxWidth: { xs: '100%', sm: 'auto' },
                  }}
                >
                  NEW
                </CButton>
                <CButton
                  color="primary"
                  style={{
                    width: '100%',
                    maxWidth: { xs: '100%', sm: 'auto' },
                  }}
                >
                  SAVE
                </CButton>
                <CButton
                  color="primary"
                  style={{
                    width: '100%',
                    maxWidth: { xs: '100%', sm: 'auto' },
                  }}
                >
                  EXIT
                </CButton>
              </Box>
            </Grid>
          </Grid>
        </Box>
        <hr/>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <TextField
                id="amount"
                label="Amount"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
              <IconButton color="primary">
                <MoreHorizIcon />
              </IconButton>
            </Box>
          </Grid>
          <Grid item xs={12}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <TextField
                id="amount"
                label="Amount"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
              <IconButton color="primary">
                <MoreHorizIcon />
              </IconButton>
            </Box>
          </Grid>
          <Grid item xs={12}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <TextField
                id="amount"
                label="Amount"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
              <IconButton color="primary">
                <MoreHorizIcon />
              </IconButton>
            </Box>
          </Grid>
          <Grid item xs={12}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <TextField
                id="amount"
                label="Amount"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
              <IconButton color="primary">
                <MoreHorizIcon />
              </IconButton>
            </Box>
          </Grid>
          <Grid item xs={6}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <TextField
                id="amount"
                label="Amount"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
              <IconButton color="primary">
                <MoreHorizIcon />
              </IconButton>
            </Box>
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControlLabel control={<Checkbox />} label="Avoid Letter Head" />
          </Grid>
          <Grid item xs={12} sm={3}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <TextField
                id="amount"
                label="Amount"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
            </Box>
          </Grid>
          <Grid item xs={12} sm={3}>
            <FormControl variant="outlined" size="small" fullWidth>
              <InputLabel id="genderLabel"></InputLabel>
              <Select
                labelId="genderLabel"
                id="gender"
                label="Gender"
              >
                <MenuItem value="M">Male</MenuItem>
                <MenuItem value="F">Female</MenuItem>
                <MenuItem value="O">Other</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          {/* <Grid item xs={3}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <TextField
                id="amount"
                label="Amount"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
            </Box>
          </Grid> */}
            <Grid item xs={12} sm={3}>
            <TextField
              id='mobile' 
              label="amount"
              fullWidth 
              variant="outlined"
              size='small'
              InputLabelProps={{style:{fontSize:'16px'}}}
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <TextField
                id="amount"
                label="Amount"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
            </Box>
          </Grid>
          <Grid item xs={12} sm={12}>
            <TextField
              id="reason"
              label="Reason"
              variant="outlined"
              size="small"
              fullWidth
              multiline
              rows={5}
              InputLabelProps={{ style: { fontSize: '16px' } }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField 
              id='area'
              label="Area"
              fullWidth
              variant="outlined"
              size='small'
              InputLabelProps={{style:{fontSize:'16px'}}}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControl variant="outlined" size="small" fullWidth>
              <InputLabel id="genderLabel"></InputLabel>
              <Select
                labelId="genderLabel"
                id="gender"
                label="Gender"
              >
                <MenuItem value="M">Male</MenuItem>
                <MenuItem value="F">Female</MenuItem>
                <MenuItem value="O">Other</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          {/* <Grid item xs={12} sm={6}>
            <TextField 
              id='phone'
              label="phone"
              fullwidth
              variant="outlined"
              size='small'
              InputLabelProps={{style: {fontSize:'16px'}}}
            />
          </Grid> */}
          <Grid item xs={12} sm={6}>
            <TextField
              id='mobile' 
              label="Phone"
              fullWidth 
              variant="outlined"
              size='small'
              InputLabelProps={{style:{fontSize:'16px'}}}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              id='mobile' 
              label="Mobile"
              fullWidth 
              variant="outlined"
              size='small'
              InputLabelProps={{style:{fontSize:'16px'}}}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              id='email'
              label="Email"
              fullWidth
              size='small'
              variant="outlined"
              InputLabelProps={{style:{fontSize:'16px'}}} 
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControlLabel control={<Checkbox />} label="Email Report" />
            <FormControlLabel control={<Checkbox />} label="Is Active" />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField 
              id='discount'
              label="Discount%"
              fullWidth 
              variant="outlined"
              size='small'
              InputLabelProps={{style:{fontSize:'16px'}}}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              id='test'
              label="TestDiscount%"
              fullWidth
              variant='outlined'
              size='small'
              InputLabelProps={{style: { fontSize:'16px'}}}
            />
          </Grid>
          <Grid item xs={12} sm={12}>
            <FormControl variant='outlined' size='small' fullWidth>
              <InputLabel id="payment">Pay Mode</InputLabel>
              <Select
                labelId='payment'
                id='payment'
                label="Pay Mode" 
              >
                <MenuItem value='cash'>Cash</MenuItem>
                <MenuItem value='UPI'>UPI</MenuItem>
                <MenuItem value='Netbanking'>Net Banking</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12}>
            <TextField
              id='description' 
              label="Description" 
              fullWidth 
              multiline 
              rows={5} 
              variant="outlined"
              size='small'
              InputLabelProps={{style: {fontSize:'16px'}}}
            />
          </Grid>
        </Grid>
      </CCardBody>
    </CCard>
  );
};

export default Account;

// CANCEL INVOICE

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { TextField, Button, Grid, Box, Typography, FormControl, InputLabel, Select, MenuItem, Autocomplete, FormControlLabel, FormGroup, Checkbox, Container, Paper } from '@mui/material';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { CButton, CCard, CCardHeader } from '@coreui/react';

const Cancelinvoice= () => {


  return (
    <>
     <CCard className="mb-4">
     {/* <CCardHeader> */}
   
      {/* <strong style={{ fontSize: '2rem', color: '#523885', fontWeight: 'bold' }}>EDIT INVOICE</strong> */}

            {/* <Grid item xs={12} sm={8} md={6} lg={4}> */}
        
        {/* </Grid> */}
          {/* </CCardHeader> */}
     <div style={{  minHeight: '100vh', padding: '20px'   }}>
   
      
        
     
    <Container component="main" maxWidth="md" >
      {/* <Paper elevation={3} style={{ padding: '16px', borderRadius: '15px' }}> */}
      <Box sx={{ padding: 2 }}>
      <Grid container spacing={2} alignItems="center">
        <Grid item xs={12} md={8}>
          <Typography
            variant="h6"
            sx={{
              margin: 0,
              fontSize: '24px',
              fontWeight: 'bold',
              color: ' #599eb4 ',
            }}
          >
            CANCEL INVOICE
          </Typography>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box sx={{ display: 'flex', justifyContent: { xs: 'center', md: 'flex-end' }, gap: '16px' }}>
            <CButton
              color="primary"
              style={{
                width: '100%',
                maxWidth: { xs: '100%', sm: 'auto' },
              }}
            >
              SAVE
            </CButton>
            <CButton
              color="primary"
              style={{
                width: '100%',
                maxWidth: { xs: '100%', sm: 'auto' },
              }}
            >
              EXIT
            </CButton>
          </Box>
        </Grid>
      </Grid>
    </Box>
            <hr/>
           
            
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
              <TextField
                id="labno"
                label="Lab No"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
                 style={{ marginTop: '10px' }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
      id="invDateTime"
      label="Date"
      variant="outlined"
      size="small"
      fullWidth
      type="datetime-local"
      InputLabelProps={{ shrink: true }}
      style={{ marginTop: '10px' }}
    />
     </Grid>
            <Grid item xs={12} sm={2}>
  <FormControl fullWidth variant="outlined" sx={{ width: '100%' , height: '100%' }}  >
    <InputLabel  sx={{
    fontSize: '1rem',
    color: 'rgba(0, 0, 0, 0.6)', 
    marginTop: '-1px'
  }}>Prefix</InputLabel>
    <Select
      name="prefix"
      label="Prefix"
      sx={{ width: '100%',height:'75%' }}>
       <MenuItem value=""><em>None</em></MenuItem>
                    <MenuItem value="Mr">Mr</MenuItem>
                    <MenuItem value="Mrs">Mrs</MenuItem>
                    <MenuItem value="Ms">Ms</MenuItem>
                    <MenuItem value="Miss">Miss</MenuItem>
    </Select>
  </FormControl>
</Grid>
<Grid item xs={12} sm={10}>
              <TextField
                id="name"
                label="Name"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
        
            <Grid item xs={12} sm={1}>
              <Typography
                variant="body1"
                gutterBottom
                sx={{
                  fontWeight: 'bold',
                  color: 'rgba(0, 0, 0, 0.7)',
                  fontSize: '16px',
                  marginTop: '8px',
                  textAlign: 'left',
                }}
              >
                Age
              </Typography>
            </Grid>
              <Grid item container xs={12} sm={7} spacing={1}>
              <Grid item xs={3}>
              <TextField
                id="dd"
                label="Day"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={3}>
              <TextField
                id="mm"
                label="Month"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={3}>
              <TextField
                id="yyyy"
                label="Year"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid> 
            <Grid item xs={12} sm={3}>
                  <FormControl variant="outlined" size="small" fullWidth>
                    <InputLabel id="genderLabel"
                    sx={{
                      fontSize: '1rem',
                      color: 'rgba(0, 0, 0, 0.6)', 
                      marginTop: '-1px'
                    }}>Gender</InputLabel>
                    <Select
                      labelId="genderLabel"
                      id="gender"
                      label="Gender"
                    >
                      <MenuItem value=""><em>None</em></MenuItem>
                      <MenuItem value="M">Male</MenuItem>
                      <MenuItem value="F">Female</MenuItem>
                      <MenuItem value="O">Other</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
<Grid item xs={12} sm={4}>
                <TextField
                  id="phone1"
                  label="Phone1"
                  variant="outlined"
                  size="small"
                  fullWidth
                  InputLabelProps={{ style: { fontSize: '16px' } }}
                />
              </Grid>
            <Grid item xs={12} sm={12}>
              <TextField
                id="email"
                label="Email"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={12}>
              <TextField
                id="refby"
                label="RefBy"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
        
    
      <Grid item xs={12} sm={12}>
        <TextField
          id="outDr"
          label="Out Dr"
          variant="outlined"
          size="small"
          fullWidth
          InputLabelProps={{ style: { fontSize: '16px' } }}
        />
      </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
                id="branch"
                label="Branch"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
                id="ipop"
                label="IP/OP"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
          
            <Grid item xs={12} sm={6}>
            <TextField
          id="collmode"
          label="Coll. Mode"
          variant="outlined"
          size="small"
          fullWidth
          InputLabelProps={{ style: { fontSize: '16px' } }}
         
        />
            </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
                id="collby"
                label="Coll. By"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
                      
      <Grid item xs={12} sm={6}>
  <TextField
    id="sampleOn"
    label="Sample On"
    type="datetime-local"
    variant="outlined"
    size="small"
    fullWidth
    InputLabelProps={{ shrink: true, style: { fontSize: '16px' } }}
  />
</Grid>
<Grid item xs={12} sm={6}>
  <TextField
    id="reportTime"
    label="Report Time"
    type="datetime-local"
    variant="outlined"
    size="small"
    fullWidth
    InputLabelProps={{ shrink: true, style: { fontSize: '16px' } }}
  />
</Grid>
        
            <Grid item xs={12}>
      <FormControl component="fieldset">
        <Typography variant="body1" gutterBottom>Report Requested Through</Typography>
        <FormGroup row>
          <FormControlLabel
             control={<Checkbox  name="personally" />}
            label="Personally"
          />
           <FormControlLabel
             control={<Checkbox  name="courier" />}
            label="Courier"
          />
          <FormControlLabel
             control={<Checkbox  name="phone" />}
            label="phone"
          />
         
          <FormControlLabel
             control={<Checkbox  name="email" />}
            label="Email"
          />
          <FormControlLabel
            control={<Checkbox  name="sms" />}
            label="SMS"
          />
         
        </FormGroup>
      </FormControl>
      
    </Grid>
    <Grid item sm={6}></Grid>
    <Grid item xs={12} sm={6}>
      <TextField
      id='invamount'
      label='Inv_Amount'
      variant='outlined'
      size='small'
      fullWidth
      InputLabelProps={{style:{fontSize:'16PX'}}}
      />
    </Grid>
    <Grid item xs={12} sm={12}>
              <TextField
                id="reason"
                label="Reason"
                variant="outlined"
                size="small"
                fullWidth
              multiline
              rows={5}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
          </Grid>
      {/* </Paper> */}
    </Container>
     {/* <ToastContainer /> */}
     <ToastContainer position="top-center" autoClose={3000} hideProgressBar />
    </div>
    </CCard>
    </>
  );
};

export default  Cancelinvoice;


// PATIENT VIEWS

//  import React, { useState } from 'react';
//  import {
//    TextField, Grid, FormControlLabel, Checkbox, Button,
//   MenuItem, Select, InputLabel, Radio, RadioGroup, FormControl,
//   Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper,
//    AppBar, Toolbar, Typography, Box, Container, FormGroup
//  } from '@mui/material';
//  import { ToastContainer } from 'react-toastify';
//  import 'react-toastify/dist/ReactToastify.css';

//  const PatientBill = () => {
//    const [selectedView, setSelectedView] = useState('Bill View');
//    const [collectionType, setCollectionType] = useState('lab');
//    const rows = [
//      { slNo: 1, labNo: 5749, name: "KRISHNA A S", age: 22, gender: "F", date: "26-Jun-2024", collectedAt: "", reference: "N Mohanan BSc MBBS MS", tests: ["COMPLETE HAEMOGRAM +", "HBsAg", "HIV-DUO (Ivth GENERATION T", "Anti HCV", "HAEMOGLOBIN (HB)"], specimen: "EDTA WHOLE ...", total: 1860, pendingAmt: 0 },
//      { slNo: 2, labNo: 5748, name: "RABESHNA", age: 36, gender: "F", date: "26-Jun-2024", collectedAt: "", reference: "Vineetha S MBBS DGO FMAS", tests: ["HAEMOGLOBIN (HB)", "ANTI MULLARIAN HORMONE", "THYROID STIMULATING HORM..."], specimen: "SERUM", total: 1510, pendingAmt: 0 },
//      { slNo: 3, labNo: 5747, name: "JAYAN N P", age: 57, gender: "M", date: "26-Jun-2024", collectedAt: "", reference: "", tests: ["CREATININE"], specimen: "SERUM", total: 140, pendingAmt: 0 },
//     { slNo: 4, labNo: 5746, name: "JOHN", age: 30, gender: "M", date: "26-Jun-2024", collectedAt: "", reference: "", tests: ["CREATININE", "GLUCOSE PLASMA FASTING"], specimen: "PLASMA(fasti...", total: 1500, pendingAmt: 0 }
//    ];

//    const filterLabels = ['Result Issued', 'On Processing', 'Time Over', 'Cancelled Invoice', 'Half Verified', 'Time Over Reminder'];
//    const handleViewChange = (event) => {
//      setSelectedView(event.target.value); // Update selected radio button state
//    };
//    const checkboxColors = ['#0073e6', '#ff9900', '#4caf50', '#f44336', '#9c27b0', '#ffc107'];
//    return (
//      <>
//        <AppBar position="static" style={{ backgroundColor: '#0c97e6' }}>
//          <Toolbar>
//            <Typography variant="h6" style={{ flexGrow: 1 }}>
//              PATIENT VIEWS
//            </Typography>
//         </Toolbar>
//        </AppBar>
//        <Container maxWidth="lg">
//          <Box sx={{ p: 2 }}>
//            <Paper elevation={3}>
//              <Box p={2}>
//                <Grid container spacing={2} alignItems="center">
//                  <Grid item xs={12}>
//                  <FormGroup row style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between' }}>
//                     {filterLabels.map((label, index) => (
//                       <FormControlLabel
//                         key={label}
//                         control={<Checkbox sx={{ color: checkboxColors[index % checkboxColors.length] }} size="small" />}
//                         label={label}
//                         style={{ marginRight: '10px' }}
//                       />
//                     ))}
//                     <Button 
//                       variant="contained" 
//                       color="primary" 
                     
//                       style={{ marginLeft: '10px' }}
//                     >
//                       Refresh
//                     </Button>
//                   </FormGroup>
//                    <Grid container spacing={2} alignItems="center" style={{ marginTop: '10px' }}>
                    
                        
//                      <Grid item >
//             <FormControl component="fieldset">
//               <RadioGroup row value={collectionType} onChange={(e) => setCollectionType(e.target.value)}>
//                 <FormControlLabel
//                   value="lab"
//                   control={<Radio size="small" />}
//                   label={<Typography variant="body2">Bill View</Typography>}
//                   sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                 />
//                 <FormControlLabel
//                   value="purchase"
//                   control={<Radio size="small" />}
//                   label={<Typography variant="body2">Result view</Typography>}
//                   sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                 />
//                 <FormControlLabel
//                   value="pharmacy"
//                   control={<Radio size="small" />}
//                   label={<Typography variant="body2">Track</Typography>}
//                   sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
//                 />
//               </RadioGroup>
//             </FormControl>
//           </Grid>
//           <Grid item xs={12} sm={2}>
//                   <FormControl variant="outlined" size="small" fullWidth>
//                     <InputLabel id="genderLabel"></InputLabel>
//                     <Select
//                       labelId="genderLabel"
//                       id="gender"
//                       label="Gender"
//                     >
//                       <MenuItem value=""><em>None</em></MenuItem>
//                       <MenuItem value="M">Male</MenuItem>
//                       <MenuItem value="F">Female</MenuItem>
//                       <MenuItem value="O">Other</MenuItem>
//                     </Select>
//                   </FormControl>
//                 </Grid>
//             <Grid item xs={12} sm={2}>
//                   <FormControl variant="outlined" size="small" fullWidth>
//                     <InputLabel id="genderLabel"></InputLabel>
//                     <Select
//                       labelId="genderLabel"
//                       id="gender"
//                       label="Gender"
//                     >
//                       <MenuItem value=""><em>None</em></MenuItem>
//                       <MenuItem value="M">Male</MenuItem>
//                       <MenuItem value="F">Female</MenuItem>
//                       <MenuItem value="O">Other</MenuItem>
//                     </Select>
//                   </FormControl>
//                 </Grid>
//                 <Grid item xs={12} sm={2}>
//                   <FormControl variant="outlined" size="small" fullWidth>
//                     <InputLabel id="genderLabel"></InputLabel>
//                     <Select
//                       labelId="genderLabel"
//                       id="gender"
//                       label="Gender"
//                     >
//                       <MenuItem value=""><em>None</em></MenuItem>
//                       <MenuItem value="M">Male</MenuItem>
//                       <MenuItem value="F">Female</MenuItem>
//                       <MenuItem value="O">Other</MenuItem>
//                     </Select>
//                   </FormControl>
//                 </Grid>
//                 <Grid item xs={12} sm={2}>
//                   <FormControl variant="outlined" size="small" fullWidth>
//                     <InputLabel id="genderLabel"></InputLabel>
//                     <Select
//                       labelId="genderLabel"
//                       id="gender"
//                       label="Gender"
//                     >
//                       <MenuItem value=""><em>None</em></MenuItem>
//                       <MenuItem value="M">Male</MenuItem>
//                       <MenuItem value="F">Female</MenuItem>
//                       <MenuItem value="O">Other</MenuItem>
//                     </Select>
//                   </FormControl>
//                 </Grid>
                
                                
//       <Grid item xs={12} sm={2}>
//   <TextField
//     id="area"
//     label="Area"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={2}>
//   <TextField
//     id="corporate"
//     label="Corporate"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={2}>
//   <TextField
//     id="phoneno"
//     label="PhoneNo"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={6}>
//   <TextField
//     id="referral"
//     label="Referral"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={2}>
//   <TextField
//     id="sampleid"
//     label="Sample Id"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={2}>
//   <TextField
//     id="department"
//     label="Department"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={2}>
//   <TextField
//     id="ipop"
//     label="IPOP"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={3}>
//   <TextField
//     id="specimen"
//     label="Specimen"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={3}>
//   <TextField
//     id="email"
//     label="Email"
//     variant="outlined"
//     size="small"
//     fullWidth
//     InputLabelProps={{  style: { fontSize: '16px' } }}
//   />
// </Grid>
// <Grid item xs={12} sm={2}>
//     <TextField
//     id='labno'
//     label="LabNo"
//     variant='outlined'
//     size='small'
//     fullWidth
//     InputLabelProps={{style: {fontSize:'16px'}}}
//     />
// </Grid>
// <Grid item xs={12} sm={2}>
// <TextField
// id='name'
// label="Name"
// variant='outlined'
// size='small'
// fullWidth
// InputLabelProps={{style: {fontSize:'16px'}}}
// />
// </Grid>
// <Grid item xs={12} sm={2}>
//     <TextField
//     id='payment'
//     label='Payment'
//     variant='outlined'
//     size='small'
//     fullWidth
//     InputLbelProps={{style: {fontSize: '16px'}}}
//     />
// </Grid>
// <Grid item xs={12} sm={6}>
//     <TextField
//     id='tests'
//     label='Tests'
//     variant='outlined'
//     size='small'
//     fullWidth
//     InputLabelProps={{style: {fontSize: '16px'}}}
//     />
// </Grid>
//   </Grid>
//                  </Grid>
//               </Grid>
               
               
//                   <Grid item xs={12}>
//                   <TableContainer style={{ maxHeight: 'calc(100vh - 400px)', overflowY:'auto' }}>
//                     <Table stickyHeader aria-label="sticky table" sx={{marginTop:'20px'}}>
//                       <TableHead>
//                         <TableRow >
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>SlNo</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Lab No</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Name</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Date</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>collected At</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Reference</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Tests</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Specimen</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Total</TableCell>
//                           <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>PendAmt</TableCell>
//                         </TableRow>
//                       </TableHead>
//                       <TableBody>
//                         {rows.map((row) => (
//                            <TableRow key={row.id}> 
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '18px' }}>{row.slNo}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.labNo}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.name}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.date}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.collectedAt}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.reference}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.tests}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.specimen}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.total}</TableCell>
//                             <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.pendingAmt}</TableCell>
                        
//                             </TableRow> 
//                         ))}
//                       </TableBody>
//                     </Table>
//                   </TableContainer>
//                 </Grid>

//                <ToastContainer />
//              </Box>
//            </Paper>
//          </Box>
//        </Container>
//      </>
//    );
//  };

//  export default PatientBill;
import React, { useState } from 'react';
import {
  TextField, Grid, FormControlLabel, Checkbox, Button,
 MenuItem, Select, InputLabel, Radio, RadioGroup, FormControl,
 Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper,
  AppBar, Toolbar, Typography, Box, Container, FormGroup
} from '@mui/material';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { CButton, CCard, CCardHeader } from '@coreui/react';

const PatientBill = () => {
  const [selectedView, setSelectedView] = useState('Bill View');
  const [collectionType, setCollectionType] = useState('lab');
  const rows = [
    { slNo: 1, labNo: 5749, name: "KRISHNA A S", age: 22, gender: "F", date: "26-Jun-2024", collectedAt: "", reference: "N Mohanan BSc MBBS MS", tests: ["COMPLETE HAEMOGRAM +", "HBsAg", "HIV-DUO (Ivth GENERATION T", "Anti HCV", "HAEMOGLOBIN (HB)"], specimen: "EDTA WHOLE ...", total: 1860, pendingAmt: 0 },
    { slNo: 2, labNo: 5748, name: "RABESHNA", age: 36, gender: "F", date: "26-Jun-2024", collectedAt: "", reference: "Vineetha S MBBS DGO FMAS", tests: ["HAEMOGLOBIN (HB)", "ANTI MULLARIAN HORMONE", "THYROID STIMULATING HORM..."], specimen: "SERUM", total: 1510, pendingAmt: 0 },
    { slNo: 3, labNo: 5747, name: "JAYAN N P", age: 57, gender: "M", date: "26-Jun-2024", collectedAt: "", reference: "", tests: ["CREATININE"], specimen: "SERUM", total: 140, pendingAmt: 0 },
   { slNo: 4, labNo: 5746, name: "JOHN", age: 30, gender: "M", date: "26-Jun-2024", collectedAt: "", reference: "", tests: ["CREATININE", "GLUCOSE PLASMA FASTING"], specimen: "PLASMA(fasti...", total: 1500, pendingAmt: 0 }
  ];

  const filterLabels = ['Result Issued', 'On Processing', 'Time Over', 'Cancelled Invoice', 'Half Verified', 'Time Over Reminder'];
  const handleViewChange = (event) => {
    setSelectedView(event.target.value); 
  };
  const checkboxColors = ['#0073e6', '#ff9900', '#4caf50', '#f44336', '#9c27b0', '#ffc107'];
  return (
    <>
      
      <Container maxWidth="lg">
        <Box sx={{ p: 2 }}>
          {/* <Paper elevation={3}> */}
          <Box sx={{ padding: 2 }}>
      <Grid container spacing={2} alignItems="center">
        <Grid item xs={12} md={8}>
          <Typography
            variant="h6"
            sx={{
              margin: 0,
              fontSize: '24px',
              fontWeight: 'bold',
              color: ' #599eb4 ',
            }}
          >
            PATIENT VIEWS
          </Typography>
        </Grid>
        <Grid item xs={12} md={4}>
          <Box sx={{ display: 'flex', justifyContent: { xs: 'center', md: 'flex-end' }, gap: '16px' }}>
            <CButton
              color="primary"
            >
              REFRESH
            </CButton>
       
          </Box>
        </Grid>
      </Grid>
    </Box>
            <hr/>
            <Box p={2}>
              <Grid container spacing={1} alignItems="center">
                <Grid item xs={12}>
                <Grid item xs={12}>
                <FormGroup row style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between' }}>
                   {filterLabels.map((label, index) => (
                     <FormControlLabel
                       key={label}
                       control={<Checkbox sx={{ color: checkboxColors[index % checkboxColors.length] }} size="small" />}
                       label={label}
                       style={{ marginRight: '10px' }}
                     />
                   ))}
                 
                 </FormGroup>
                 </Grid>
                 
                  <Grid container spacing={1} alignItems="center" style={{ marginTop: '10px' }}>
                   
                       
                    <Grid item >
           <FormControl component="fieldset">
             <RadioGroup row value={collectionType} onChange={(e) => setCollectionType(e.target.value)}>
               <FormControlLabel
                 value="lab"
                 control={<Radio size="small" />}
                 label={<Typography variant="body2">Bill View</Typography>}
                 sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
               />
               <FormControlLabel
                 value="purchase"
                 control={<Radio size="small" />}
                 label={<Typography variant="body2">Result view</Typography>}
                 sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
               />
               <FormControlLabel
                 value="pharmacy"
                 control={<Radio size="small" />}
                 label={<Typography variant="body2">Track</Typography>}
                 sx={{ '& .MuiSvgIcon-root': { fontSize: 12 } }}
               />
             </RadioGroup>
           </FormControl>
         </Grid>
         {/* <Grid item xs={12} sm={2}>
                 <FormControl variant="outlined" size="small" fullWidth>
                   <InputLabel id="genderLabel"></InputLabel>
                   <Select
                     labelId="genderLabel"
                     id="gender"
                     label="Gender"
                   >
                     <MenuItem value=""><em>None</em></MenuItem>
                     <MenuItem value="M">Male</MenuItem>
                     <MenuItem value="F">Female</MenuItem>
                     <MenuItem value="O">Other</MenuItem>
                   </Select>
                 </FormControl>
               </Grid> */}
           <Grid item xs={12} sm={2}>
                 <FormControl variant="outlined" size="small" fullWidth>
                   <InputLabel id="genderLabel"></InputLabel>
                   <Select
                     labelId="genderLabel"
                     id="gender"
                     label="Gender"
                   >
                     {/* <MenuItem value=""><em>JEEVA</em></MenuItem> */}
                     <MenuItem value="M">Male</MenuItem>
                     <MenuItem value="F">Female</MenuItem>
                     <MenuItem value="O">Other</MenuItem>
                   </Select>
                 </FormControl>
               </Grid>
               <Grid item xs={12} sm={2}>
                 <FormControl variant="outlined" size="small" fullWidth>
                   <InputLabel id="genderLabel"></InputLabel>
                   <Select
                     labelId="genderLabel"
                     id="gender"
                     label="Gender"
                   >
                     <MenuItem value=""><em>None</em></MenuItem>
                     <MenuItem value="M">Male</MenuItem>
                     <MenuItem value="F">Female</MenuItem>
                     <MenuItem value="O">Other</MenuItem>
                   </Select>
                 </FormControl>
               </Grid>
               <Grid item xs={12} md={2}>
          <TextField
                id="from"
                label="FromDate"
                type="date"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
              />
          </Grid>

          <Grid item xs={12} md={2}>
          <TextField
                id="to"
                label="ToDate"
                type="date"
                variant="outlined"
                size="small"
                fullWidth
                InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
              />
          </Grid>
          

               
                               
     <Grid item xs={12} sm={2}>
 <TextField
   id="area"
   label="Area"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={2}>
 <TextField
   id="corporate"
   label="Corporate"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={2}>
 <TextField
   id="phoneno"
   label="PhoneNo"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={6}>
 <TextField
   id="referral"
   label="Referral"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={2}>
 <TextField
   id="sampleid"
   label="Sample Id"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={2}>
 <TextField
   id="department"
   label="Department"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={2}>
 <TextField
   id="ipop"
   label="IPOP"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={3}>
 <TextField
   id="specimen"
   label="Specimen"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={3}>
 <TextField
   id="email"
   label="Email"
   variant="outlined"
   size="small"
   fullWidth
   InputLabelProps={{  style: { fontSize: '16px' } }}
 />
</Grid>
<Grid item xs={12} sm={2}>
   <TextField
   id='labno'
   label="LabNo"
   variant='outlined'
   size='small'
   fullWidth
   InputLabelProps={{style: {fontSize:'16px'}}}
   />
</Grid>
<Grid item xs={12} sm={2}>
<TextField
id='name'
label="Name"
variant='outlined'
size='small'
fullWidth
InputLabelProps={{style: {fontSize:'16px'}}}
/>
</Grid>
<Grid item xs={12} sm={2}>
   <TextField
   id='payment'
   label='Payment'
   variant='outlined'
   size='small'
   fullWidth
   InputLbelProps={{style: {fontSize: '16px'}}}
   />
</Grid>
<Grid item xs={12} sm={6}>
   <TextField
   id='tests'
   label='Tests'
   variant='outlined'
   size='small'
   fullWidth
   InputLabelProps={{style: {fontSize: '16px'}}}
   />
</Grid>
 </Grid>
                </Grid>
             </Grid>
              
              
                 <Grid item xs={12}>
                 <TableContainer style={{ maxHeight: 'calc(100vh - 400px)', overflowY:'auto' }}>
                   <Table stickyHeader aria-label="sticky table" sx={{marginTop:'20px'}}>
                     <TableHead>
                       <TableRow >
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>SlNo</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Lab No</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Name</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Date</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>collected At</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Reference</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Tests</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Specimen</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Total</TableCell>
                         <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>PendAmt</TableCell>
                       </TableRow>
                     </TableHead>
                     <TableBody>
                       {rows.map((row) => (
                          <TableRow key={row.id}> 
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '18px' }}>{row.slNo}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.labNo}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.name}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.date}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.collectedAt}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.reference}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.tests}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.specimen}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.total}</TableCell>
                           <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.pendingAmt}</TableCell>
                       
                           </TableRow> 
                       ))}
                     </TableBody>
                   </Table>
                 </TableContainer>
               </Grid>

              <ToastContainer />
            </Box>
          {/* </Paper> */}
        </Box>
      </Container>
  
    </>
  );
};

export default PatientBill;

//EDIT INVOICE 
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { TextField, Button, Grid, Box, Typography, FormControl, InputLabel, Select, MenuItem, Autocomplete, FormControlLabel, FormGroup, Checkbox, Container, Paper } from '@mui/material';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { CButton, CCard, CCardHeader } from '@coreui/react';

const EditInvoice= () => {
  // state variables declared for inputing and editing the form 
  const [labNo, setLabNo] = useState('');
  const [invNo, setInvNo] = useState('');
  const [branchId, setBranchId] = useState('');
  const [yearId, setYearId] = useState('');
  const [cpyId, setCpyId] = useState(null);
  const [invDate, setInvDate] = useState('');
  const [invTime, setInvTime] = useState('');
  const [prefix, setPrefix] = useState('');
  const [name, setName] = useState('');
  const [day, setDay] = useState('');
  const [month, setMonth] = useState('');
  const [year, setYear] = useState('');
  const [gender, setGender] = useState('');
  const [dob, setDob] = useState('');
  const [age, setAge] = useState('');
  const [wardId,setWardId] = useState('')
  const [email, setEmail] = useState('');
  const [phone1, setPhone1] = useState('');
  const [phone2, setPhone2] = useState('');
  const [nationality, setNationality] = useState('');
  const [address, setAddress] = useState('');
  const [refBy, setRefBy] = useState('');
  const [outDr, setOutDr] = useState('');
  const [passport, setPassport] = useState('');
  const [srfNo, setSrfNo] = useState('');
  const [branch, setBranch] = useState('');
  const [aadhar, setAadhar] = useState('');
  const [wardNo, setWardNo] = useState('');
  const [ipOpNo, setIpOpNo] = useState('');
  const [collMode, setCollMode] = useState('');
  const [collBy, setCollBy] = useState('');
  const [reportRequestedThrough, setReportRequestedThrough] = useState({
    personally: false,
    courier: false,
    phone: false,
    email: false,
    sms: false,
    
  });
  const [invDateTime, setInvDateTime] = useState('');
  const [report, setReport] = useState({ urgentwork: false });
  const [notes, setNotes] = useState('');
  const [invoiceData, setInvoiceData] = useState(null);
  const [error, setError] = useState(null);
  const [errorAadhar, setErrorAadhar] = useState('');
  // flag to check data is updated or not initially it is set to false
  const [isDataUpdated, setIsDataUpdated] = useState(false);
  // state variables for email validation
  const [isEmailValid, setIsEmailValid] = useState(true); 
  const [isPhone1Valid, setIsPhone1Valid] = useState(true);
  const [isPhone2Valid, setIsPhone2Valid] = useState(true);
  const [smplDate, setSmplDate] = useState('');
  const [invSmplDate, setInvSmplDate] = useState('');
  const [repTime, setRepTime] = useState('');
  const [invRepTime, setInvRepTime] = useState('');
  
  // States for search results for different fields

  const [searchResultsRefBy, setSearchResultsRefBy] = useState([]);
  const [searchResultsCollBy, setSearchResultsCollBy] = useState([]);
  const [searchResultsBranch, setSearchResultsBranch] = useState([]);
  const [searchResultsCollMode, setSearchResultsCollMode] = useState([]);

// Error states for each search field
  const [errorRefBy, setErrorRefBy] = useState(null);
  const [errorCollBy, setErrorCollBy] = useState(null);
  const [errorBranch, setErrorBranch] = useState(null);
  const[errorCollMode, setErrorCollMode] = useState(null);

// Selected key states for each search field
  const [selectedRefByKey, setSelectedRefByKey] = useState('');
  const [selectedCollByKey, setSelectedCollByKey] = useState('');
  const [selectedBranchKey, setSelectedBranchKey] = useState('');
  const[selectedCollModeKey,setSelectedCollModeKey] = useState('')
  const [invData, setInvData] = useState({
    Inv_DrId: invoiceData?.Inv_DrId || 0,
    Inv_CltnID: invoiceData?.Inv_CltnID || 0,
    Inv_CollModeId:invoiceData?.Inv_CollModeId || 0,
    Inv_BrId:invoiceData?.Inv_BrId || 0
  });
  useEffect(() => {
    // Check if yrId is updated
    if (yearId !== null) {
        // Update cpyId to match yrId
        setCpyId(yearId);
    }
}, [yearId]); // Run this effect whenever yrId changes



 useEffect(() => {

    setIsDataUpdated(
      prefix !== (invoiceData?.Inv_Tittle || '') ||
      name !== (invoiceData?.Inv_name || '') ||
      day !== (invoiceData?.Inv_ageDD || '') ||
      month !== (invoiceData?.Inv_ageMM || '') ||
      year !== (invoiceData?.Inv_ageYY || '') ||
      gender !== (invoiceData?.Inv_Gender || '') ||
      dob !== (invoiceData?.Inv_Dob || '') ||
      phone1 !== (invoiceData?.Inv_phno || '') ||
      phone2 !== (invoiceData?.Inv_Mob || '') ||
      email !== (invoiceData?.Inv_Email || '') ||
      nationality !== (invoiceData?.Inv_Nationality || '') ||
      outDr !== (invoiceData?.Inv_OutDr || '') ||
      passport !== (invoiceData?.Inv_Passport || '') ||
      srfNo !== (invoiceData?.Inv_SRFno || '') ||
      aadhar !== (invoiceData?.Inv_Aadhaar || '') ||
      refBy !== (invoiceData?.Inv_RefBy || '') ||
      branch !== (invoiceData?.Branch || '') ||
      collBy !== (invoiceData?.Inv_CollBy || '') ||
      collMode !== (invoiceData?.Inv_CollMode || '') ||
      wardNo !== (invoiceData?.Inv_Ward || '') ||
      ipOpNo !== (invoiceData?.Inv_RsltNO || '') ||
      smplDate !== (invoiceData?.SmplDate || '') ||
      invSmplDate !== (invoiceData?.Inv_SmplDate || '') ||
      repTime !== (invoiceData?.RepTime || '') ||
      invRepTime !== (invoiceData?.Inv_RepTime || '') ||
      notes !== (invoiceData?.Inv_Comment || '') ||
      wardId !== (invoiceData?.Inv_WardId || '') ||
      reportRequestedThrough.personally !== (invoiceData?.Inv_RepThrPersonal || false) ||
      reportRequestedThrough.courier !== (invoiceData?.Inv_RepThrCourier || false) ||
      reportRequestedThrough.phone !== (invoiceData?.Inv_RepThrPhone || false) ||
      reportRequestedThrough.sms !== (invoiceData?.Inv_RepThrSms || false) ||
      reportRequestedThrough.email !== (invoiceData?.Inv_RepThrEmail || false) ||
      address !== (invoiceData?.Inv_Address || '') ||
      invDate !== (invoiceData?.Inv_Date || '') ||  
      invTime !== (invoiceData?.Inv_time || '')||
      invNo !== (invoiceData?.Inv_No || '') 
    );
  }, [prefix, name, day, month, year, gender, dob, phone1, phone2, email, nationality, address,
    outDr, passport, srfNo, wardNo, ipOpNo, aadhar, refBy, branch, collBy, collMode,
    repTime, notes, reportRequestedThrough, invDate, invTime ,invNo,smplDate,wardId,invRepTime,invSmplDate, invoiceData,
  ]);
 
 
useEffect(() => {
    const prefixToGender = { Mr: 'M',Mrs: 'F',Ms: 'F', Miss: 'F',
    };

    setGender(prefixToGender[prefix] || '');
  }, [prefix]);


  const handleAadharChange = (e) => {
    const inputValue = e.target.value;
    setAadhar(inputValue);
    
    // Clear Aadhar error when Aadhar field is changed
    if (!/^\d{12}$/.test(inputValue)) {
      setErrorAadhar('Aadhar number must be 12 digits');
    } else {
      setErrorAadhar('');
    }
  };
  

  const handleAadharBlur = () => {
    // Validate Aadhar number when input loses focus
    if (!/^\d{12}$/.test(aadhar)) {
      setErrorAadhar('Aadhar number must be 12 digits');
      toast.error('Aadhar number must be 12 digits'); // Display toast message
    }
  };


  // Function to validate email using regex
  const validateEmail = (email) => {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
    
  };
// function to validate phone number
  const validatePhone = (phone) => {
    const regex = /^[0-9]{10}$/;
    return regex.test(phone);
    
  };

// for fetching data
  const fetchData = async () => {
    try {
      const response = await axios.get(`http://172.16.16.10:8082/api/EditInvoice`, {
        params: {
          LabNo: labNo,
          YearId: 2425,
          BranchId: 2,
        },
      });
      const invoiceData = response.data.invoiceDtls;
      setInvoiceData(invoiceData);
      // for refby field
      const refByValue = invoiceData.Inv_RefBy || '';
      setRefBy(refByValue);
      if (refByValue) {
        setSearchResultsRefBy([{ AhMst_pName: refByValue }]);
      } else {
        setSearchResultsRefBy([]);
      }

       // for CollBy field
       const collByValue = invoiceData.Inv_CollBy || '';
       setCollBy(collByValue);
       if (collByValue) {
         setSearchResultsCollBy([{ AhMst_pName: collByValue }]);
       } else {
         setSearchResultsCollBy([]);
       }
        // for collmode value
       const collModeValue = invoiceData.Inv_CollMode || '';
       setCollMode(collModeValue);
       if (collModeValue) {
         setSearchResultsCollMode([{ Mstr_Desc: collModeValue }]);
       } else {
         setSearchResultsCollMode([]);
       }
       // for branch value
       const branchValue = invoiceData.Branch || '';
       setBranch(branchValue);
       if (branchValue) {
         setSearchResultsBranch([{BrMst_Name: branchValue }]);
       } else {
         setSearchResultsBranch([]);
       }
    setInvData({
      Inv_DrId: invoiceData?.Inv_DrId || 0,
      Inv_CltnID: invoiceData?.Inv_CltnID || 0,
      Inv_CollModeId:invoiceData?.Inv_CollModeId || 0,
      Inv_BrId:invoiceData?.Inv_BrId || 0
        });
      setInvNo(invoiceData?.Inv_No || '');
      const validPrefixes = ['', 'Mr', 'Mrs', 'Ms', 'Miss'];
      setPrefix(validPrefixes.includes(invoiceData.Inv_Tittle) ? invoiceData.Inv_Tittle : '');
      setName(invoiceData.Inv_name || '');
      setDay(invoiceData.Inv_ageDD !== null && invoiceData.Inv_ageDD !== undefined ? invoiceData.Inv_ageDD : '');
      setMonth(invoiceData.Inv_ageMM || '');
      setYear(invoiceData.Inv_ageYY || '');
      setDob(invoiceData.Inv_Dob || '');
      const validGender = ['', 'M', 'F', 'O'];
      setGender(validGender.includes(invoiceData.Inv_Gender) ? invoiceData.Inv_Gender : '');
      setEmail(invoiceData.Inv_Email || '');
      setPhone1(invoiceData.Inv_phno || '');
      setPhone2(invoiceData.Inv_Mob || '');
      setNationality(invoiceData.Inv_Nationality || '');
      setAddress(invoiceData.Inv_Address || '');
      setNotes(invoiceData.Inv_Comment || '');
      setOutDr(invoiceData.Inv_OutDr || '');
      setSrfNo(invoiceData.Inv_SRFno !== null && invoiceData.Inv_SRFno !== undefined ? invoiceData.Inv_SRFno : '');
      setRefBy(invoiceData.Inv_RefBy || '');
      setSearchResultsRefBy([invoiceData.Inv_RefBy]);
      setBranch(invoiceData.Branch || '');
      setCollMode(invoiceData.Inv_CollMode || '');
      setWardId(invoiceData.Inv_WardId || '');
      setSearchResultsBranch([invoiceData.Branch]);
      setCollBy(invoiceData.Inv_CollBy || '');
      setSearchResultsCollBy([invoiceData.Inv_CollBy]);
      setSearchResultsCollMode([invoiceData.Inv_CollMode]);
      setPassport(invoiceData.Inv_Passport || '');
      setAadhar(invoiceData.Inv_Aadhaar || '');
      setIpOpNo(invoiceData.Inv_RsltNO || '');
      setWardNo(invoiceData.Inv_Ward || '');
      setReportRequestedThrough({
        personally:invoiceData.Inv_RepThrPersonal || false,
        courier: invoiceData.Inv_RepThrCourier || false,
        phone: invoiceData.Inv_RepThrPhone || false,
        email:invoiceData.Inv_RepThrEmail || false,
        sms: invoiceData.Inv_RepThrSms || false,
        
      });
      setSmplDate(invoiceData.SmplDate || '');
      setRepTime(invoiceData.RepTime || '');
      setInvRepTime(invoiceData.Inv_RepTime || '');
      setInvDate(invoiceData.Inv_Date || '');
      setInvTime(invoiceData.Inv_time || '');
      setInvSmplDate(invoiceData.Inv_SmplDate)


      setError('');
    } catch (error) {
      console.log(error.message);
      setError(error.message);
    }
  };

    // function for sample on and report on field 
   const handleSmplDateChange = (event) => {
    const newSmplDate = event.target.value;
    setSmplDate(newSmplDate);
   
  
     // Get the current ISO formatted date (YYYY-MM-DD)
     const currentDate = new Date().toISOString().split('T')[0];
  
     // Construct ISO formatted time with current date and new time
     const isoTime = `${newSmplDate}:00.000Z`;
   
     // Update state with the ISO formatted time for storing
     setInvSmplDate(isoTime);
  };
  
  const handleRepTimeChange = (event) => {
    const newRepTime = event.target.value;
  
    // Update state with the formatted time for display
    setRepTime(newRepTime);
  
    // Get the current ISO formatted date (YYYY-MM-DD)
    const currentDate = new Date().toISOString().split('T')[0];
  
    // Construct ISO formatted time with current date and new time
    const isoTime = `${newRepTime}:00.000Z`;
  
    // Update state with the ISO formatted time for storing
    setInvRepTime(isoTime);
  };
  
  useEffect(() => {
    if (invoiceData) {
      // Initialize time from invoiceData
      const initialRepTime = invoiceData.Inv_RepTime || ''; // Assuming Inv_RepTime is a string
      const initialSmplDate = invoiceData.Inv_SmplDate || ''
      // Set initial values
      setRepTime(initialRepTime);
      setSmplDate(initialSmplDate)
  
      // Extract time part from invoiceData and set for storing
      const initialTime = initialSmplDate.slice(11, 16)
      const initialTimePart = initialRepTime.slice(11, 16); // Extracts HH:mm
      setInvRepTime(initialTimePart + ':00.000Z');
      setInvSmplDate(initialTime + ':00.000z') // Ensure format HH:mm:ss.SSSZ
    }
  }, [invoiceData]);
  const convertAMPMTo24Hour = (time) => {
    let [hour, minutePeriod] = time.split(':');
    const minute = minutePeriod.slice(0, 2);
    const period = minutePeriod.slice(3).toUpperCase();
  
    hour = parseInt(hour, 10);
    if (period === 'PM' && hour < 12) {
      hour += 12;
    } else if (period === 'AM' && hour === 12) {
      hour = 0;
    }
  
    return `${hour.toString().padStart(2, '0')}:${minute}`;
  };
  
  // Utility function to format date and time for input field
  const formatDateTimeForInput = (date, time) => {
    return `${date}T${time}`;
  };
  useEffect(() => {
    if (invoiceData) {
      // Convert the fetched time to 24-hour format if it is in AM/PM
      const time24Hour = convertAMPMTo24Hour(invoiceData.Inv_time);
      const formattedDateTime = formatDateTimeForInput(invoiceData.Inv_Date.slice(0, 10), time24Hour);
      setInvDateTime(formattedDateTime);
    }
  }, [invoiceData]);
  
  const handleDateTimeChange = (e) => {
    const datetimeValue = e.target.value;
    setInvDateTime(datetimeValue); // Update state with new datetime value
  };

  const formatTimeToAMPM = (time) => {
    let [hour, minute] = time.split(':').map(Number);
    const period = hour >= 12 ? 'PM' : 'AM';
    if (hour > 12) hour -= 12;
    if (hour === 0) hour = 12;
    return `${hour}:${minute.toString().padStart(2, '0')} ${period}`;
  };


// saving data back to server

const saveDataToAPI = () => {

  console.log('Aadhar state:', aadhar); 
  // Check if Aadhar number is empty or not 12 digits
  if (!aadhar || !/^\d{12}$/.test(aadhar)) {
    setErrorAadhar('Aadhar number must be 12 digits');
    return;
  }
  // Check if email is filled and validate email format
  if (email && !validateEmail(email)) {
    setIsEmailValid(false);
    return;
  }

  // Check if phone1 is filled and validate phone number format
  if (phone1 && !validatePhone(phone1)) {
    setIsPhone1Valid(false);
    return;
  }

  // Check if phone2 is filled and validate phone number format
  if (phone2 && !validatePhone(phone2)) {
    setIsPhone2Valid(false);
    return;
  }

  const payload = {
    ...invoiceData,
    // LabNo:labNo,
    Inv_No: invNo,
    Inv_Tittle: prefix,
    Inv_name: name, 
    Inv_ageDD: day,
    Inv_ageMM: month,
    Inv_ageYY: year,
    Inv_Gender: gender,
    Inv_Dob: dob, 
    Inv_Email: email,
    Inv_phno: phone1,
    Inv_Mob: phone2,
    Inv_Nationality: nationality,
    Inv_Address: address,
    Inv_Aadhaar: aadhar,
    Inv_OutDr: outDr,
    Inv_Passport: passport,
    Inv_RsltNO: ipOpNo,
    Inv_SRFno: srfNo,
    Inv_Ward: wardNo,
    Inv_CollBy: collBy,
    Inv_CollMode: collMode,
    Inv_RefBy: refBy,
    Inv_DrId: invData.Inv_DrId,
    Inv_CltnID:invData.Inv_CltnID,
    Inv_CollModeId:invData.Inv_CollModeId,
    Inv_BrId: invData.Inv_BrId,
    // Branch: branch,
    Inv_WardId:wardId || null,
    SmplDate:smplDate,
    Inv_SmplDate: invSmplDate,
    RepTime:repTime,
    Inv_RepTime:invRepTime,
    Inv_RepThrPersonal: reportRequestedThrough.personally,
    Inv_RepThrCourier: reportRequestedThrough.courier,
    Inv_RepThrPhone: reportRequestedThrough.phone,
    Inv_RepThrEmail: reportRequestedThrough.email,
    Inv_RepThrSms: reportRequestedThrough.sms,
    Inv_Comment:notes,
    Inv_Date: invDateTime.slice(0, 10), // Extract date part
    Inv_time: formatTimeToAMPM(invDateTime.slice(11, 16)),  // Extract time part in HH:mm format
  };
  console.log('Payload to be sent to API:', payload);

  axios.post('http://172.16.16.10:8082/api/EditInvSave', payload)
    .then(response => {
      console.log('Data saved successfully: ', response.data);
      toast.success('Data updated successfully!');
    })
    .catch(error => {
      console.error('Error saving data:', error);
      toast.error('Error saving data.');
    });
};
    // function for age calculation
    const calculateAge = (dob) => {
      if (dob) {
        const birthDate = new Date(dob);
        const today = new Date();
    
        let years = today.getFullYear() - birthDate.getFullYear();
        let months = today.getMonth() - birthDate.getMonth();
        let days = today.getDate() - birthDate.getDate();
    
        // Adjust for negative months
        if (months < 0 || (months === 0 && today.getDate() < birthDate.getDate())) {
          years--;
          months += 12;
        }
    
        // Adjust for negative days
        if (days < 0) {
          const tempDate = new Date(today.getFullYear(), today.getMonth(), 0);
          days = tempDate.getDate() - birthDate.getDate() + today.getDate();
          months--;
        }
    
        // Update the age states
        setYear(years.toString());
        setMonth(months.toString());
        setDay(days.toString());
        setAge(years.toString()); // Update the age state as well
      }
    };

    // Function to fetch search results from the API
  const fetchSearchResults = async (searchType, value) => {
    try {
      const response = await axios.get(`http://172.16.16.10:8082/api/SearchMaster`, {
        params: {
          SrchItem: searchType,
          SrchVal: value
        }
      });
      return response.data;
    } catch (error) {
      throw new Error(error.response.data.message || 'Failed to fetch search results');
    }
  };
    
    // Function to handle search input changes and fetch results based on searchType
    const handleSearchChange = async (searchType, value, setSearchResults, setError) => {
      try {
        const results = await fetchSearchResults(searchType, value);
        switch (searchType) {
          
          case 'RefBy':
            results.refByDetails.sort((a, b) => {
              const nameA = a.AhMst_pName.trim().toLowerCase();
              const nameB = b.AhMst_pName.trim().toLowerCase();
              return nameA.localeCompare(nameB);
            });
            setSearchResults(results.refByDetails);
            setError(null);
            break;
  
          case 'CollBy':
            results.collByDetails.sort((a, b) => {
              const nameA = a.AhMst_pName.trim().toLowerCase();
              const nameB = b.AhMst_pName.trim().toLowerCase();
              return nameA.localeCompare(nameB);
            });
            setSearchResults(results.collByDetails);
            setError(null);
            break;
  
            case 'Branch':
              results.brnchDetails.sort((a, b) => {
                const nameA = a.BrMst_Name.trim().toLowerCase();
                const nameB = b.BrMst_Name.trim().toLowerCase();
                return nameA.localeCompare(nameB);
              });
              setSearchResults(results.brnchDetails);
              console.log(results.brnchDetails);
              setError(null);
              break;
  
              case 'CollMode':
                results.mastrDetails.sort((a, b) => {
                  const nameA = a.Mstr_Desc.trim().toLowerCase();
                  const nameB = b.Mstr_Desc.trim().toLowerCase();
                  return nameA.localeCompare(nameB);
                });
                setSearchResults(results.mastrDetails);
                console.log(results.mastrDetails);
                setError(null);
                break;
  
          default:
            break;
        }
      } catch (error) {
        setError(error.message);
      }
    };
    const handleRefByChange = (event, newValue) => {
      if (newValue) {
        const selectedRefBy = searchResultsRefBy.find(result => result.AhMst_pName === newValue);
        if (selectedRefBy) {
          setSelectedRefByKey(selectedRefBy.AhMst_Key);
          setRefBy(newValue);
          setInvData(prevState => ({
            ...prevState,
            Inv_DrId: selectedRefBy.AhMst_Key,
          }));
          setOutDr('');
        }
      } else {
        setSelectedRefByKey('');
        setRefBy('');
        setInvData(prevState => ({
          ...prevState,
          Inv_DrId: 0,
        }));
      }
    };
  
    // Handler for changing Out Dr
    const handleOutDrChange = (event) => {
      setOutDr(event.target.value);
      setRefBy(''); // Clear Ref By when Out Dr changes
    };
   // Event handler for CollBy field changes
   const handleCollByChange = (event, newValue) => {
    if (newValue) {
      const selectedCollBy = searchResultsCollBy.find(result => result.AhMst_pName === newValue);
      if (selectedCollBy) {
        setSelectedCollByKey(selectedCollBy.AhMst_Key);
        setCollBy(newValue);
        setInvData(prevState => ({
          ...prevState,
          Inv_CltnID: selectedCollBy.AhMst_Key, 
        }));
      }
    } else {
      setSelectedCollByKey('');
      setCollBy('');
      setInvData(prevState => ({
        ...prevState,
        Inv_CltnID: 0, 
      }));
    }
  };
     // Event handler for Branh field changes
     const handleBranchChange = (event, newValue) => {
      if (newValue) {
        const selectedBranch = searchResultsBranch.find(result => result.BrMst_Name === newValue);
        if (selectedBranch) {
          setSelectedBranchKey(selectedBranch.BrMst_Key);
          setBranch(newValue);
          setInvData(prevState => ({
            ...prevState,
            Inv_BrId: selectedBranch.BrMst_Key, 
          }));
        }
      } else {
        setSelectedBranchKey('');
        setBranch('');
        setInvData(prevState => ({
          ...prevState,
          Inv_BrId: 0, 
        }));
      }
    };
    // eventhandler for collmode field changes
    const handleCollModeChange = (event, newValue) => {
      if (newValue) {
        const selectedCollMode = searchResultsCollMode.find(result => result.Mstr_Desc === newValue);
        if (selectedCollMode) {
          setSelectedCollModeKey(selectedCollMode.Mstr_Key);
          setCollMode(newValue);
          setInvData(prevState => ({
            ...prevState,
            Inv_CollModeId: selectedCollMode.Mstr_Key, 
          }));
        }
      } else {
        setSelectedCollModeKey('');
        setCollMode('');
        setInvData(prevState => ({
          ...prevState,
          Inv_CollModeId: 0, 
        }));
      }
    };
    
      // Event handler for report requested through checkbox changes
      const handleCheckboxChange = (event) => {
        const { name, checked } = event.target;
        setReportRequestedThrough(prevState => ({
          ...prevState,
          [name]: checked,
        }));
      };


      // for clearing the fields
const clearDetails = () => {setLabNo('');setBranchId('');setYearId('');setInvoiceData(null);setError(null);
setInvDate('');setInvTime('');setPrefix('');setName('');setDay('');setMonth('');setYear('');setGender('');
setDob('');setPhone1('');setPhone2('');setEmail('');setNationality('');setAddress('');setRefBy(''); setOutDr('');
setPassport('');setSrfNo('');setBranch(''); setAadhar(''); setWardNo('');setIpOpNo('');setCollMode('');setCollBy('');
setReportRequestedThrough({ personally: false,courier: false,email: false, sms: false,
  phone: false,
  });setReport({ urgentwork: false });setNotes('');
};
// Event handler for "NEW" button click
const handleNewButtonClick = () => {
  clearDetails();
};

  return (
    <>
     <CCard className="mb-4">
     <CCardHeader>
   
      <strong style={{ fontSize: '2rem', color: '#523885', fontWeight: 'bold' }}>EDIT INVOICE</strong>

            {/* <Grid item xs={12} sm={8} md={6} lg={4}> */}
          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: '16px' }}>
              <CButton color="secondary" onClick={handleNewButtonClick}>NEW</CButton>
              <CButton color="primary" onClick={saveDataToAPI} disabled={!isDataUpdated}>SAVE</CButton>
            <CButton color="secondary">EXIT</CButton>
          </Box>
        {/* </Grid> */}
          </CCardHeader>
     <div style={{  minHeight: '100vh', padding: '20px'   }}>
     {/* <Typography
              variant="h6"
              sx={{
                margin: 0,
                fontSize: '24px',
                fontWeight: 'bold',
                color: '#333'
              }}
            >
         EDIT INVOICE
            </Typography> */}
      
        {/* <Grid item xs={12} sm={8} md={6} lg={4}>
          <Box sx={{ display: 'flex', justifyContent: 'center', gap: '16px', marginBottom: '20px' }}>
              <CButton color="secondary" onClick={handleNewButtonClick}>NEW</CButton>
              <CButton color="primary" onClick={saveDataToAPI} disabled={!isDataUpdated}>SAVE</CButton>
            <CButton color="secondary">EXIT</CButton>
          </Box>
        </Grid> */}
     
    <Container component="main" maxWidth="md" >
      <Paper elevation={3} style={{ padding: '16px', borderRadius: '15px' }}>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
              <TextField
                id="labno"
                label="Lab No"
                variant="outlined"
                size="small"
                fullWidth
                value={labNo}
                onChange={(e) => setLabNo(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
                style={{ marginBottom: '10px' }}
              />
            </Grid>
        
        {/* <Grid item xs={12} sm={6}>
          <TextField
          id="branchId"
                label="Branch Id"
                variant="outlined"
                size="small"
                fullWidth
                value={branchId}
                onChange={(e) => setBranchId(e.target.value)}
                InputLabelProps={{ style: { fontSize: '14px' } }}
              />
            </Grid>
            
          <Grid item xs={12} sm={6}>
          <TextField
                id="yearId"
                label="Year Id"
                variant="outlined"
                size="small"
                fullWidth
                value={yearId}
                onChange={(e) => setYearId(e.target.value)}
                InputLabelProps={{ style: { fontSize: '14px' } }}
                style={{ marginBottom: '20px' }}
              />
            </Grid> */}
            <Grid item xs={12} sm={6}>
               <CButton color="primary" onClick={fetchData}
               style={{ 
                marginBottom:'5px'
               
              }}
               >SEARCH</CButton>
            </Grid>
        </Grid>
          <Grid container spacing={2}>
          {error && <Typography variant="body2" color="error">{error}</Typography>}
          {invoiceData && (
             <>
          <Grid item xs={12} sm={6}>
              <TextField
                id="labno"
                label="Lab No"
                variant="outlined"
                size="small"
                fullWidth
                value={labNo}
                onChange={(e) => setLabNo(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
                 style={{ marginTop: '10px' }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
      id="invDateTime"
      label="Date"
      variant="outlined"
      size="small"
      fullWidth
      type="datetime-local"
      value={invDateTime}
      onChange={handleDateTimeChange}
      InputLabelProps={{ shrink: true }}
      style={{ marginTop: '10px' }}
    />
     </Grid>
            <Grid item xs={12} sm={2}>
  <FormControl fullWidth variant="outlined" sx={{ width: '100%' , height: '100%' }}  >
    <InputLabel  sx={{
    fontSize: '1rem',
    color: 'rgba(0, 0, 0, 0.6)', 
    marginTop: '-1px'
  }}>Prefix</InputLabel>
    <Select
      name="prefix"
      value={prefix}
      onChange={(e) => setPrefix(e.target.value)}
      label="Prefix"
      sx={{ width: '100%',height:'75%' }}>
       <MenuItem value=""><em>None</em></MenuItem>
                    <MenuItem value="Mr">Mr</MenuItem>
                    <MenuItem value="Mrs">Mrs</MenuItem>
                    <MenuItem value="Ms">Ms</MenuItem>
                    <MenuItem value="Miss">Miss</MenuItem>
    </Select>
  </FormControl>
</Grid>
<Grid item xs={12} sm={10}>
              <TextField
                id="name"
                label="Name"
                variant="outlined"
                size="small"
                fullWidth
                value={name}
                  onChange={(e) => setName(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
        
            <Grid item xs={12} sm={1}>
              <Typography
                variant="body1"
                gutterBottom
                sx={{
                  fontWeight: 'bold',
                  color: 'rgba(0, 0, 0, 0.7)',
                  fontSize: '16px',
                  marginTop: '8px',
                  textAlign: 'left',
                }}
              >
                Age
              </Typography>
            </Grid>
              <Grid item container xs={12} sm={7} spacing={1}>
              <Grid item xs={3}>
              <TextField
                id="dd"
                label="Day"
                variant="outlined"
                size="small"
                fullWidth
                value={day}
                onChange={(e) => setDay(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={3}>
              <TextField
                id="mm"
                label="Month"
                variant="outlined"
                size="small"
                fullWidth
                value={month}
                onChange={(e) => setMonth(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={3}>
              <TextField
                id="yyyy"
                label="Year"
                variant="outlined"
                size="small"
                fullWidth
                value={year}
                onChange={(e) => setYear(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid> 
            <Grid item xs={12} sm={3}>
                  <FormControl variant="outlined" size="small" fullWidth>
                    <InputLabel id="genderLabel"
                    sx={{
                      fontSize: '1rem',
                      color: 'rgba(0, 0, 0, 0.6)', 
                      marginTop: '-1px'
                    }}>Gender</InputLabel>
                    <Select
                      labelId="genderLabel"
                      id="gender"
                      value={gender}
                      onChange={(e) => setGender(e.target.value)}
                      label="Gender"
                    >
                      <MenuItem value=""><em>None</em></MenuItem>
                      <MenuItem value="M">Male</MenuItem>
                      <MenuItem value="F">Female</MenuItem>
                      <MenuItem value="O">Other</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
              <Grid item xs={12} sm={4}>
              <TextField
                id="dob"
                label="Date of Birth"
                type="date"
                variant="outlined"
                size="small"
                fullWidth
                value={dob}
                onChange={(e) => {
                  setDob(e.target.value);
                  calculateAge(e.target.value);
                }}
                InputLabelProps={{ shrink: true, style: { fontSize: '16px' } }}
              />
            </Grid>

        
<Grid item xs={12} sm={4}>
                <TextField
                  id="phone1"
                  label="Phone1"
                  variant="outlined"
                  size="small"
                  fullWidth
                   value={phone1}
                  onChange={(e) => {
                    setPhone1(e.target.value)
                    setIsPhone1Valid(true)
                  }}
                  InputLabelProps={{ style: { fontSize: '16px' } }}
                   error={!isPhone1Valid}
                   helperText={!isPhone1Valid ? "Invalid Phone number" : ""}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
              <TextField
                id="phone2"
                label="Phone2"
                variant="outlined"
                size="small"
                fullWidth
                value={phone2}
                onChange={(e) => {
                  setPhone2(e.target.value)
                  setIsPhone2Valid(true)
                }}
                InputLabelProps={{ style: { fontSize: '16px' } }}
                 error={!isPhone2Valid} 
                 helperText={!isPhone2Valid ? "Invalid Phone number" : ""}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                id="email"
                label="Email"
                variant="outlined"
                size="small"
                fullWidth
                 value={email}
                onChange={(e) => {
                  setEmail(e.target.value);
                  setIsEmailValid(true);
                }}
                InputLabelProps={{ style: { fontSize: '16px' } }}
                 error={!isEmailValid}
                 helperText={!isEmailValid ? "Invalid email address" : ""}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                id="nationality"
                label="Nationality"
                variant="outlined"
                size="small"
                fullWidth
                value={nationality}
                onChange={(e) => setNationality(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                id="address"
                label="Address"
                variant="outlined"
                size="small"
                fullWidth
                 value={address}
                onChange={(e) => setAddress(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
      <Autocomplete
        freeSolo
        options={searchResultsRefBy.map((result) => result ? result.AhMst_pName : '')}
        value={refBy}
        onInputChange={(event, newValue) => handleSearchChange('RefBy', newValue, setSearchResultsRefBy, setErrorRefBy)}
        onChange={handleRefByChange}
        renderInput={(params) => (
          <TextField
            {...params}
            id="refBy"
            label="Ref By"
            variant="outlined"
            size="small"
            fullWidth
            // error={!!errorRefBy}
            // helperText={errorRefBy}
            disabled={!!outDr}
            InputLabelProps={{ style: { fontSize: '14px' } }}
          />
        )}
      />
    </Grid>  
      <Grid item xs={12} sm={6}>
        <TextField
          id="outDr"
          label="Out Dr"
          variant="outlined"
          size="small"
          fullWidth
          value={outDr}
          onChange={handleOutDrChange}
          disabled={!!refBy} // Disable if Ref By has a value
          InputLabelProps={{ style: { fontSize: '16px' } }}
        />
      </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
                id="passport"
                label="Passport"
                variant="outlined"
                size="small"
                fullWidth
                value={passport}
                onChange={(e) => setPassport(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
                id="srfno"
                label="SRF No."
                variant="outlined"
                size="small"
                fullWidth
                value={srfNo}
                onChange={(e) => setSrfNo(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
  <Autocomplete
    freeSolo
    options={searchResultsBranch.map((result) => result ? result.BrMst_Name : '')}
    value={branch}
    onInputChange={(event, newValue) => handleSearchChange('Branch', newValue, setSearchResultsBranch, setErrorBranch)}
    onChange={handleBranchChange}
    renderInput={(params) => (
      <TextField
        {...params}
        id="branch"
        label="Branch"
        variant="outlined"
        size="small"
        fullWidth
        // error={!!errorBranch}
        // helperText={errorBranch}
        InputLabelProps={{ style: { fontSize: '16px' } }}
      />
    )}
  />
</Grid>
            <Grid item xs={12} sm={6}>
            <TextField
          id="aadhar"
          label="Aadhar"
          variant="outlined"
          size="small"
          fullWidth
          value={aadhar}
          onChange={handleAadharChange}
          onBlur={handleAadharBlur}
          InputLabelProps={{ style: { fontSize: '16px' } }}
          error={!!errorAadhar}
          helperText={errorAadhar}
        />
            </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
                id="wardno"
                label="Ward No"
                variant="outlined"
                size="small"
                fullWidth
                value={wardNo}
                onChange={(e) => setWardNo(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
            <TextField
                id="ipopno"
                label="IP/OP NO"
                variant="outlined"
                size="small"
                fullWidth
                value={ipOpNo}
                onChange={(e) => setIpOpNo(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
  <Autocomplete
    freeSolo
    options={searchResultsCollMode.filter(result => result).map(result => result.Mstr_Desc || '')}
    value={collMode}
    onInputChange={(event, newValue) => handleSearchChange('CollMode', newValue, setSearchResultsCollMode, setErrorCollMode)}
    onChange={handleCollModeChange}
    renderInput={(params) => (
      <TextField
        {...params}
        id="collMode"
        label="Coll Mode"
        variant="outlined"
        size="small"
        fullWidth
        // error={!!errorCollMode}
        // helperText={errorCollMode}
        InputLabelProps={{ style: { fontSize: '16px' } }}
      />
    )}
  />
</Grid>

          <Grid item xs={12} sm={6}>
        <Autocomplete
          freeSolo
          options={searchResultsCollBy.map((result) => result ? result.AhMst_pName : '')}
          value={collBy}
          onInputChange={(event, newValue) => handleSearchChange('CollBy', newValue, setSearchResultsCollBy, setErrorCollBy)}
          onChange={handleCollByChange}
          renderInput={(params) => (
            <TextField
              {...params}
              id="collBy"
              label="Coll By"
              variant="outlined"
              size="small"
              fullWidth
              // error={!!errorCollBy}
              // helperText={errorCollBy}
              InputLabelProps={{ style: { fontSize: '16px' } }}
            />
          )}
        />
      </Grid>
      <Grid item xs={12} sm={6}>
  <TextField
    id="sampleOn"
    label="Sample On"
    type="datetime-local"
    variant="outlined"
    size="small"
    fullWidth
    value={smplDate}
    onChange={handleSmplDateChange}
    InputLabelProps={{ shrink: true, style: { fontSize: '16px' } }}
  />
</Grid>
<Grid item xs={12} sm={6}>
  <TextField
    id="reportTime"
    label="Report Time"
    type="datetime-local"
    variant="outlined"
    size="small"
    fullWidth
    value={repTime}
    onChange={handleRepTimeChange}
    InputLabelProps={{ shrink: true, style: { fontSize: '16px' } }}
  />
</Grid>
        
            <Grid item xs={12}>
      <FormControl component="fieldset">
        <Typography variant="body1" gutterBottom>Report Requested Through</Typography>
        <FormGroup row>
          <FormControlLabel
             control={<Checkbox checked={reportRequestedThrough.personally} onChange={handleCheckboxChange} name="personally" />}
            label="Personally"
          />
           <FormControlLabel
             control={<Checkbox checked={reportRequestedThrough.courier} onChange={handleCheckboxChange} name="courier" />}
            label="Courier"
          />
          <FormControlLabel
             control={<Checkbox checked={reportRequestedThrough.phone} onChange={handleCheckboxChange} name="phone" />}
            label="phone"
          />
         
          <FormControlLabel
             control={<Checkbox checked={reportRequestedThrough.email} onChange={handleCheckboxChange} name="email" />}
            label="Email"
          />
          <FormControlLabel
            control={<Checkbox checked={reportRequestedThrough.sms} onChange={handleCheckboxChange} name="sms" />}
            label="SMS"
          />
         
        </FormGroup>
      </FormControl>
      
    </Grid>
    <Grid item xs={12} sm={12}>
              <TextField
                id="notes"
                label="Notes"
                variant="outlined"
                size="small"
                fullWidth
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                InputLabelProps={{ style: { fontSize: '16px' } }}
              />
            </Grid>
            </>
          )}
          </Grid>
      </Paper>
    </Container>
     {/* <ToastContainer /> */}
     <ToastContainer position="top-center" autoClose={3000} hideProgressBar />
    </div>
    </CCard>
    </>
  );
};

export default  EditInvoice;


//PENDING COLLECTION


import React, { useEffect, useState } from 'react';
import { Container, Grid, Paper, TextField, Typography, FormControl, InputLabel, Select, MenuItem, TableContainer, Table, TableHead, TableBody, TableRow, TableCell, Box, FormGroup, FormControlLabel, Checkbox } from '@mui/material';
import { CButton, CCard, CCardHeader } from '@coreui/react';

const PendingCollection = () => {
  const [error, setError] = useState('');
  const [isChecked, setIsChecked] = useState(false);
  const [prefix, setPrefix] = useState('');
  const [gender, setGender] = useState('');

  const handleCheckboxChange = (event) => {
    setIsChecked(event.target.checked);
  };

  useEffect(() => {
    const prefixToGender = { Mr: 'M', Mrs: 'F', Ms: 'F', Miss: 'F' };
    setGender(prefixToGender[prefix] || '');
  }, [prefix]);

  // Sample data for the table
  const rows = [
    { id: 1, col1: 'Data 1', col2: 'Data 2', col3: 'Data 3', col4: 'Data 4', col5: 'Data 5', col6: 'Data 6', col7: 'Data 7' },
    { id: 2, col1: 'Data 8', col2: 'Data 9', col3: 'Data 10', col4: 'Data 11', col5: 'Data 12', col6: 'Data 13', col7: 'Data 14' },
    { id: 3, col1: 'Data 15', col2: 'Data 16', col3: 'Data 17', col4: 'Data 18', col5: 'Data 19', col6: 'Data 20', col7: 'Data 21' },
    { id: 4, col1: 'Data 22', col2: 'Data 23', col3: 'Data 24', col4: 'Data 25', col5: 'Data 26', col6: 'Data 27', col7: 'Data 28' }
  ];

  return (
    <CCard className="mb-4">
        <CCardHeader>
      <strong style={{ fontSize: '2rem',  color: '#523885', fontWeight: 'bold' }}>PENDING COLLECTION</strong>
    </CCardHeader>
    <div style={{ minHeight: '100vh', padding: '20px' }}>
    
      <Container maxWidth="lg">
        <Grid container alignItems="center" spacing={2} style={{ marginBottom: '20px' }}>
          {/* <Grid item xs={12} sm={6}>
            <Typography
              variant="h6"
              sx={{
                margin: 0,
                fontSize: '24px',
                fontWeight: 'bold',
                color: '#333'
              }}
            >
              PENDING COLLECTION
            </Typography>
          </Grid> */}
          <Grid item xs={12} sm={6}>
            <Box sx={{ display: 'flex', justifyContent: 'flex-start', gap: '16px', flexWrap: 'wrap' }}>
              <CButton color="primary">PRINT</CButton>
              <CButton color="secondary">SAVE</CButton>
              <CButton color="primary">EXIT</CButton>
            </Box>
          </Grid>
        </Grid>

        {/* Form and Table */}
        <Grid container spacing={2}>
          {/* Left side - Form */}
          <Grid item xs={12} sm={6}>
            <Paper elevation={3} style={{ padding: '16px', borderRadius: '15px' }}>
              <Grid container spacing={2}>
                {/* Error Message */}
                {error && (
                  <Grid item xs={12}>
                    <Typography variant="body2" color="error">{error}</Typography>
                  </Grid>
                )}

                {/* Form Fields */}
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="labno"
                    label="Lab No"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="dateTime"
                    label="Date/Time"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={3}>
                  <FormControl fullWidth variant="outlined" sx={{ width: '100%', height: '100%' }}>
                    <InputLabel sx={{ fontSize: '1.2rem', color: 'rgba(0, 0, 0, 0.6)', marginTop: '-6px' }}>Prefix</InputLabel>
                    <Select
                      name="prefix"
                      value={prefix}
                      onChange={(e) => setPrefix(e.target.value)}
                      label="Prefix"
                      sx={{ width: '100%', height: '75%' }}
                    >
                      <MenuItem value=""><em>None</em></MenuItem>
                      <MenuItem value="Mr">Mr</MenuItem>
                      <MenuItem value="Mrs">Mrs</MenuItem>
                      <MenuItem value="Ms">Ms</MenuItem>
                      <MenuItem value="Miss">Miss</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={9}>
                  <TextField
                    id="name"
                    label="Name"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>

                <Grid item xs={12} sm={2}>
                  <Typography variant="body1" gutterBottom sx={{ fontWeight: 'bold', color: 'rgba(0, 0, 0, 0.7)', fontSize: '16px', marginTop: '8px', textAlign: 'left' }}>
                    Age
                  </Typography>
                </Grid>
                <Grid item xs={2}>
                  <TextField
                    id="dd"
                    label="Day"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={2}>
                  <TextField
                    id="mm"
                    label="Month"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
             <Grid item xs={2}>
              <TextField
              id='yyyy'
              label='Year'
              variant='outlined'
              size='small'
              fullWidth
              InputLabelProps={{style:{fontSize:'18px'}}}
              />
             </Grid>
                <Grid item xs={12} sm={4}>
                  <FormControl fullWidth variant="outlined" sx={{ width: '100%', height: '100%' }}>
                    <InputLabel sx={{ fontSize: '1.2rem', color: 'rgba(0, 0, 0, 0.6)', marginTop: '-6px' }}>Gender</InputLabel>
                    <Select
                      name="gender"
                      value={gender}
                      onChange={(e) => setGender(e.target.value)}
                      label="Gender"
                      sx={{ width: '100%', height: '75%' }}
                    >
                      <MenuItem value=""><em>None</em></MenuItem>
                      <MenuItem value="M">Male</MenuItem>
                      <MenuItem value="F">Female</MenuItem>
                      <MenuItem value="O">Other</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="phone1"
                    label="Phone1"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="email"
                    label="Email"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="paymode"
                    label="Pay Mode"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="cardno"
                    label="Card No"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    id="bank"
                    label="Bank"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="invamount"
                    label="Inv.Amount"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="curbalance"
                    label="Cur.Balance"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="collamount"
                    label="Coll.Amount"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    id="colldatetime"
                    label="Coll.DateTime"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>

                <Grid item xs={12} sm={12}>
                  <TextField
                    id="notes"
                    label="Notes"
                    variant="outlined"
                    size="small"
                    fullWidth
                    multiline
                    rows={2}
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
              </Grid>
            </Paper>
          </Grid>

          {/* Right side - Table */}
          <Grid item xs={12} sm={6}>
            <Paper elevation={3} style={{ padding: '16px', borderRadius: '15px', height: '100%' }}>
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={4}>
                    <TextField 
                    id='dateFrom'
                    label='From'
                    variant='outlined'
                    size='small'
                    fullWidth
                    InputLabelProps={{style:{ fontSize: '18px'}}}
                    />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <TextField
                    id="dateTo"
                    label="To"
                    variant="outlined"
                    size="small"
                    fullWidth
                    InputLabelProps={{ style: { fontSize: '18px' } }}
                  />
                </Grid>
                <Grid item xs={12} sm={4} container alignItems="center" justifyContent="flex-start" spacing={1}>
                 <Grid item>
                <CButton color="primary">REFRESH</CButton>
                </Grid>
                <Grid item>
                <CButton color="secondary">PRINT</CButton>
                </Grid> 
              </Grid>

   
            <Grid container spacing={2}>
                <Grid item xs={12}>
                  <FormControl component="fieldset" fullWidth>
                    <FormGroup row>
                      <FormControlLabel
                        label="Corporate"
                        labelPlacement='start'
                        control={
                          <Checkbox
                            checked={isChecked}
                            onChange={handleCheckboxChange}
                            name="corporate"
                          />
                        }
                      />
                      {isChecked && (
                        <Grid item>
                          <TextField
                            label="Input"
                            variant="outlined"
                            size='small'
                            InputLabelProps={{ style: { fontSize: '18px' } }}
                            style={{ marginTop: '8px',marginLeft:'6px' }} // Adjust this value to move the input further down or up
                          />
                        </Grid>
                      )}
                    </FormGroup>
                  </FormControl>
                </Grid>
              </Grid>
                {/* Table */}
                <Grid item xs={12}>
                  <TableContainer style={{ maxHeight: 'calc(100vh - 400px)', overflowY:'auto' }}>
                    <Table stickyHeader aria-label="sticky table">
                      <TableHead>
                        <TableRow>
                          <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>SlNo</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Lab</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Date</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Name</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Balance</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>Corporate</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>User</TableCell>
                          <TableCell sx={{ border: '1px solid #dddddd', background: '#f2f2f2', fontSize: '12px', padding: '8px' }}>View</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {rows.map((row) => (
                           <TableRow key={row.id}> 
                            <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.id}</TableCell>
                            <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col1}</TableCell>
                            <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col2}</TableCell>
                            <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col3}</TableCell>
                            <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col4}</TableCell>
                            <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col5}</TableCell>
                            <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col6}</TableCell>
                            <TableCell sx={{ border: '1px solid #dddddd', fontSize: '12px', padding: '8px' }}>{row.col7}</TableCell>
                            </TableRow> 
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </Grid>
              </Grid>
            </Paper>
          </Grid>
        </Grid>
     
      </Container>
    </div>
    </CCard>
  );
};

export default PendingCollection;

//PATIENT REGISTRATION

  import React, { useState, useEffect } from 'react';
  import { TextField, Button, Grid, Box, Typography, FormControl, InputLabel, Select, MenuItem, Container, Paper, Autocomplete } from '@mui/material';
  import { ToastContainer, toast } from 'react-toastify';
  import 'react-toastify/dist/ReactToastify.css';
  import axios from 'axios';
  import { CCard, CCardHeader } from '@coreui/react';

    const Patient = () => {
      // declaring state variables needed
      const [searchCriteria, setSearchCriteria] = useState('Patient ID'); // state variable for the searchcrieteria ie, whether it is name,id,email,phone
      const [searchValue, setSearchValue] = useState('');// state variable for searchitem value depends on the search criteria
      const [suggestions, setSuggestions] = useState([]); // state variable for providing suggestions depending on the search value
      const [patientDetails, setPatientDetails] = useState(null); // state variable for storing the details of the patient
      const [isEditMode, setIsEditMode] = useState(false); // Track edit mode initially it is set to false
      const [errors, setErrors] = useState({}); // state variable for storing the errors 

         useEffect(() => {
          console.log('Component mounted or updated.');
         }, []);

          // function for clearing the form fields
         const resetForm = () => {  
           console.log('Resetting form.');
           setPatientDetails(null);
           setSearchValue('');
           setSuggestions([]);
           setIsEditMode(false);
           setErrors({});
        };

        // function for entering the searchcriteria 
      const handleSearchCriteriaChange = (event) => {   
        setSearchCriteria(event.target.value); // it sets the value selected
       setSearchValue('');  // acording to the search item resets the value and suggestions 
        setSuggestions([]);
      };
    // function to enter the value according to searchcriteria
     const handleSearchValueChange = (event, value) => {
     console.log('Search value changed:', value);
       setSearchValue(value);  // according to search item search value set to the value entered
       fetchSuggestions(value); // suggestions according to the value
      };
      // function for fetching the suggetions according to the search criteria
      const fetchSuggestions = async (value) => { // search value is passed as parameter 
        console.log('Fetching suggestions with value:', value);
        try {
          const response = await axios.post('http://172.16.16.10:8082/api/PatientMstr/PatientSearchMaster', { // request is send to backend 
            YearId: 2425,   // with parameters yearid, branchid, searchitem, and the value
            BranchId: 2,
            SrchItem: searchCriteria,
            srchVal:value
            // SrchVal: value.toLowerCase(),
          });

          if (response.data && response.data.patientList) { // if response.data exist and the patientlist is not null then the suggestions is set with the patient details
            setSuggestions(response.data.patientList);
          } else {
            setSuggestions([]); // if no response the suggetions is set to empty
          }
        } catch (error) {
          toast.error('Error fetching suggestions');  // any error in fetching data is displayed using toast
        }
      };
      // function for normailizing the title ie, to convert title to standard form
      const normalizeTitle = (title) => {
        switch (title) {   // differnt cases for that if the title is MR it is set to Mr form like that rest of the following
          case 'MR':
            return 'Mr';
          case 'MRS':
            return 'Mrs';
          case 'MS':
            return 'Ms';
          case 'MISS':
            return 'Miss';
          default:
            return title;
       }
     };
    // for selecting the patient object from the list and populating it to the form
   const handleSelectPatient = async (event, newValue) => { // two parameters the value and event is passed
    if (!newValue) return; // if no value it exits here and stop the function

    try {
      console.log('Selected Patient:', newValue); // Log selected patient for debugging
      const response = await axios.post('http://172.16.16.10:8082/api/PatientMstr/PatientDetailsMaster', { //request sends to backend for taking the patient details
        YearId: 2425,// parameters are sent along with the request that is yearid,branchid and patientcode of the enetrerd patient 
        BranchId: 2,
        PatCode: newValue.Patient_Code,
      });
      console.log('Response from fetchPatientDetails:', response); // Log API response for debugging

      if (response.data && response.data.patDetails) { // if response data exists and patdetils is not null then spreading the details and also normalizing the title
        const { patDetails } = response.data; // destructuring the patientdetails from response.data

        // Function to trim string values and remove commas
        const trimStrings = (obj) => { // obj is passed as an argument to trimStrings function
          const trimmedObj = {}; // an empty is created to store the  processed key value pairs
          Object.keys(obj).forEach(key => { // iterate over each key in obj object
            if (typeof obj[key] === 'string') { // checks if the value associated with the key of the type is string 
              trimmedObj[key] = obj[key].trim().replace(/\s*,\s*/g, ','); // remove all the white spaces around it replace with th regular expression trim all spaces before and after comma
            } else {
              trimmedObj[key] = obj[key];  //if it is not string directly assigned to the key in trimmedObj without any modification
            }
          });
          return trimmedObj;// return the trimmed object
        };
        

        // Trim patient details
        const trimmedPatientDetails = trimStrings(patDetails);

        // Normalize title
        trimmedPatientDetails.Patient_Title = normalizeTitle(trimmedPatientDetails.Patient_Title);

        // Update patient details
        setPatientDetails(trimmedPatientDetails);// Update patient details with full details
        setIsEditMode(false);  // Log updated state

      // Update searchValue to show the selected search item value in the TextField only 
        let selectedValue;
        switch (searchCriteria) {
          case 'Patient ID':
            selectedValue = newValue.Patient_Code;
            break;
          case 'Name':
            selectedValue = newValue.Patient_Name;
            break;
          case 'Email':
            selectedValue = newValue.Patient_Email;
            break;
          case 'Phone':
            selectedValue = newValue.Patient_Phno;
            break;
          default:
            selectedValue = '';
        }
        setSearchValue(selectedValue); // update the value with the selected value field  ie, when name is selected corresponding value only appears on the textfield 
      } else {
        toast.error('Patient details not found');  // if no data it displays a toast message
      }
    } catch (error) {
      console.error('Error fetching patient details:', error); // Log the error to console
      toast.error('Error fetching patient details'); // for displaying any errors during the request
    }
  };

      
      
   
      // function to calculate age in days, months, and years with the dob value 
  const calculateAge = (dob) => { // dob is passed as parameter
   if (!dob) return; // if there is no dob stop the execution here

    const today = new Date();  // takes the current date that is todays date '04-07-2024'
    const birthDate = new Date(dob);  // dob is taken '17-12-2000'
  
    // Calculate age
    let ageYear = today.getFullYear() - birthDate.getFullYear();  // 2024-2000 = 24
    let ageMonth = today.getMonth() - birthDate.getMonth();  // 7-12 = -5
    let ageDay = today.getDate() - birthDate.getDate();   // 4-17 = -13

    // Adjust negative ageMonth
    if (ageMonth < 0 || (ageMonth === 0 && ageDay < 0)) {   // here month is -5 so it is negative then
      ageYear--;                                          // 1 is decremented from year here it becomes 24-1 = 23
      ageMonth += 12;                                      // 12 is added to month ie, -5 +12 = 7
    }

    // Adjust negative ageDay
    if (ageDay < 0) {
      const tempDate = new Date(today.getFullYear(), today.getMonth(), 0);  // for getting the last day of previous month of the current date here we get '30-06-2024'
      ageDay = tempDate.getDate() + ageDay;   // 30 + -13 = 17
      ageMonth--;                      // one is decremented from month 7 -1 = 6
    }

    // Update state

    setPatientDetails((prevDetails) => ({
      ...prevDetails,
      Patient_Ageyy: ageYear !== 0 ? ageYear.toString() : prevDetails.Patient_Ageyy,
      Patient_Agemm: ageMonth !== 0 ? ageMonth.toString() : prevDetails.Patient_Agemm,
      Patient_Agedd: ageDay !== 0 ? ageDay.toString() : prevDetails.Patient_Agedd,
    }));
    // setPatientDetails((prevDetails) => ({
    //   ...prevDetails,  // spreading all details fetched and updating only the age fields
    //  Patient_Ageyy: ageYear.toString(),   // it becomes 23
    //   Patient_Agemm: ageMonth.toString(),  // 6
    //   Patient_Agedd: ageDay.toString(),// 17
    // }));
  };
  // function to validate some fields before saving back to server
  const validate = () => {
    const newErrors = {};    //  object for storing errors
    if (!patientDetails.Patient_Name) {    // if no patient name is there when saving it shows the error ie, making it as a required field 
    newErrors.Patient_Name = 'Name is required';
      toast.warn('Please fill the required fields') // it is shown as a toast message
    }
    // for phone numbervalidation ensuring it contains 10 digits here it checks if phone number is available it test using regular expression
   if(patientDetails.Patient_Phno && !/^\d{10}$/.test(patientDetails.Patient_Phno)){
    newErrors.Patient_Phno = 'please enter a valid phone number';
    toast.error('Please enter a valid phone number')  // displays an error message it it does not contain 10 digits
    }
    if(patientDetails.Patient_mobile && !/^\d{10}$/.test(patientDetails.Patient_mobile)){
     newErrors.Patient_mobile = 'Invalid mobile number';
      toast.error('please enter a valid mobile  number')
    }
    // for email validation if email is there and is not in the correct format mentioned it validates and shows an error 
    if (patientDetails.Patient_Email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(patientDetails.Patient_Email)) { // it checks some characters before the @ without
      newErrors.Patient_Email = 'Invalid email address';      // white space and after @ some characters after that . should there and some characters after that without any whitespace
      toast.error('please enter a valid email address')
    }
   // for validating the age fields are mandatory 
    if (
      patientDetails.Patient_Ageyy === 0 &&
      patientDetails.Patient_Agemm === 0 &&
      patientDetails.Patient_Agedd === 0
    ) {
      newErrors.Patient_Age = 'Age is required';
      toast.warn('Please fill in the age fields');
    } 

   // for making gender field is mandatory
   if (!patientDetails.Patient_Ismale) {
     newErrors.Patient_Ismale = 'Gender is required';
     toast.warn('Please select the gender');
   }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0; // returns true if there is no error and otherwise it is false
  };
    // function to set the gender field according to the title
   const handleTitleChange = (e) => {
   const newTitle = e.target.value; // for storing the selected title
   let gender = ''; // initially is null 

    switch (newTitle) { // when the prefix changes gender is set according to it 
      case 'Mr':     // if is selected Mr then gender is set to Male 
        gender = 'Male';
       break;
      case 'Mrs':  // if it selects these fields it is set to female
      case 'Ms':
      case 'Miss':
        gender = 'Female';
        break;
      default:    // if no value is selected it is set to null as initial value 
        gender = '';
    }
      // update the patient details again 
   setPatientDetails((prevDetails) => ({
      ...prevDetails, // spreading the details fetched and updating the title according to the selected one 
     Patient_Title: newTitle,
      Patient_Ismale: gender, // updates the gender according to it 
    }));
    setErrors((prevErrors) => ({   // if any errors occurs in the gender field 
      ...prevErrors,
      Patient_Ismale: '',
    }));
  };


// function for saving the data back to server

const handleSaveOrUpdate = async () => {
  if (!validate()) {
    return;
  }

  // Trim all necessary fields
  const trimmedDetails = {
    ...patientDetails,
    Patient_Name: patientDetails.Patient_Name.trim(),
    Patient_Email: patientDetails.Patient_Email.trim(),
    Patient_Phno: patientDetails.Patient_Phno.trim(),
    Patient_mobile: patientDetails.Patient_mobile.trim(),
    // Add more fields as needed
  };

  try {
    const editFlag = isEditMode ? 1 : 0;
    const response = await axios.post('http://172.16.16.10:8082/api/PatientSaveUpdate', {
      ...trimmedDetails,
      Patient_CpyId: 2,
      Patient_YrId: 2425,
      EditFlag: editFlag,
    });

    if (response.data.status && response.data.status.length > 0 && response.data.status[0].status === 'Success') {
      toast.success('Patient details saved successfully');
      if (!isEditMode) {
        resetForm();
      } else {
        setIsEditMode(false);
      }
    } else {
      toast.error('Failed to save/update patient details');
    }
  } catch (error) {
    console.error('Error saving/updating patient details:', error);
    toast.error('Error saving/updating patient details');
  }
};


//   const handleSaveOrUpdate = async () => {
//    if (!validate()) {  // if validation fails it stops further execution
//       return;
//     }
//     try {
//       const editFlag = isEditMode ? 1 : 0;  // it sends 1 in update mode and 0 when save mode 
//       console.log('Edit Flag:', editFlag);
//       const response = await axios.post('http://172.16.16.10:8082/api/PatientSaveUpdate', {  // sends requests saving the data back 
//         ...patientDetails,  // sending the patient details along with companyid ,yearid and editflag
//         // Patient_Name: patientDetails.Patient_Name.toLowerCase(),
//         Patient_CpyId: 2,
//         Patient_YrId: 2425,
//         EditFlag: editFlag,  // 0 for save and 1 for edit
//       });
//       console.log('response recieved',response)
// // checks if there is data.status and atlest one status and the data.status first index atelest === success then it displays success messgae
//       if (response.data.status && response.data.status.length > 0 && response.data.status[0].status === 'Success') {
//         toast.success('Patient details saved successfully');
//         if (!isEditMode) { // if it is not in edit mode is it reset the form 
//           resetForm();
//         } else {
//           setIsEditMode(false); // otherwise it is set to 0
//         }
//       } else {
//         toast.error('Failed to save/update patient details'); // if any error occurs it is dispalyed as a toast message 
//       }
//     } catch (error) {
//       console.error('Error saving/updating patient details:', error);
//       toast.error('Error saving/updating patient details');
//     }
//   };
  // function to display the list of options , hightlighing the matched option .....
 const renderOption = (props, option) => { // two parameters props and option props contains the attributes or other things from the parent component and option contains the patient details
        const { Patient_Name, Patient_Email, Patient_Phno, Patient_Code } = option; // Destructuring the required fields from the list 
        const highlight = searchValue.toLowerCase(); // variable to store the search value
        // Function to render highlighted text
      const renderHighlightedText = (text, isHighlighted) => { // two parameters the text a boolen value 
         if (!isHighlighted) {  // if it false return the text 
            return text;
         }
          // text is the  string to split over the regular expression split is used to split in no.of arrays of substring, gi is flag g for global ensures that not only matches the first character matches the rest of the character, i is for case sensitive matching
          const parts = text.split(new RegExp(`(${highlight})`,'gi'));// text = John Doe, hightlight Do then regex becomes /Do/gi
          return (    // then part  before match John , matched part Do, part after match e, then [ 'John', 'Do', 'e']
            <span>
              {parts.map((part, index) =>
                part.toLowerCase() === highlight ? ( // here it iterates over the array if hightlight matches then it is stored into part span tag with a style the part not matched is stored as plain text
                  <span key={index} style={{ fontWeight: 'bold', backgroundColor: '#a6e88d' }}>
                    {part}
                  </span>
             ) : (
                  part
                )
              )}
            </span>
          );
       };
       // for displaying the details in a list in autocomplete hightlight the values according to the search criteria
        return (
          <li key={option.Patient_Code} {...props}>
            <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>
             {/* <table>
               <tr>
                 <td>{renderHighlightedText(Patient_Name || '',searchCriteria === 'Name')}</td>
               </tr>
               <tr>
                 <td>{renderHighlightedText(Patient_Email || '', searchCriteria === 'Email')}</td>
               </tr>
               <tr>
                 <td>{renderHighlightedText(Patient_Phno || '', searchCriteria === 'Phone')}</td>
                 <td>{renderHighlightedText(Patient_Code || '', searchCriteria === 'Patient ID')}</td>
               </tr>
               </table> */}
              <div>{renderHighlightedText(Patient_Name || '', searchCriteria === 'Name')}</div>
              <div>{renderHighlightedText(Patient_Email || '', searchCriteria === 'Email')}</div>
              <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                <span>{renderHighlightedText(Patient_Phno || '', searchCriteria === 'Phone')}</span>
                <span>{renderHighlightedText(Patient_Code || '', searchCriteria === 'Patient ID')}</span>
             </div> 
            </div>
          </li>
      );
      };

      return (
        <>
          <CCard className="mb-4">
            <CCardHeader>
              <strong style={{ fontSize: '2rem', color: '#523885', fontWeight: 'bold' }}>PATIENT REGISTRATION</strong>
            </CCardHeader>
            <div style={{ minHeight: '100vh', padding: '20px' }}>
              <Container component="main" maxWidth="md">
                <Grid container spacing={2}>
                <Grid item xs={12} sm={4}>
                  <FormControl fullWidth variant="outlined" sx={{ height: '40px', marginBottom: '25px' }}>
                    <InputLabel sx={{ fontSize: '1rem', top: '-2px' }}>Search By</InputLabel>
                    <Select
                     value={searchCriteria}
                      onChange={handleSearchCriteriaChange}
                      label="Search By"
                      sx={{ height: '40px' }} 
                    >
                      <MenuItem value="Patient ID">Patient ID</MenuItem>
                      <MenuItem value="Name">Name</MenuItem>
                      <MenuItem value="Email">Email</MenuItem>
                      <MenuItem value="Phone">Phone</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={8}>
                  <Autocomplete
                   freeSolo
                    options={suggestions}
                    getOptionLabel={(option) => `${option.Patient_Name || ''}, ${option.Patient_Email || ''}, ${option.Patient_Phno || ''}, ${option.Patient_Code || ''}`}
                    onInputChange={handleSearchValueChange}
                    onChange={handleSelectPatient}
                    onClose={resetForm}
                    renderOption={renderOption}
                    renderInput={(params) => (
                     <TextField
                        {...params}
                       label={searchCriteria}
                       variant="outlined"
                        size="small"
                        fullWidth
                        InputLabelProps={{ style: { fontSize: '14px' } }} 
                        InputProps={{
                          ...params.InputProps,
                           style: { marginBottom:'20px' }, 
                        }}
                        sx={{
                          '& .MuiAutocomplete-inputRoot': {
                            paddingRight: '0px', 
                          },
                        }}
                     />
                   )}
                  inputValue={searchValue}
                  />
                </Grid>
                </Grid>
                {patientDetails && (
                  <Grid container spacing={2}>
         <Grid item xs={12} sm={3}>
                      <TextField
                        id="patientid"
                      label="Patient ID"
                        variant="outlined"
                       value={patientDetails.Patient_Code}
                        onChange={(e) => setPatientDetails({ ...patientDetails, Patient_Code: e.target.value })}
                        size="small"
                        fullWidth
                        InputLabelProps={{ style: { fontSize: '14px' } }}
                        disabled={!isEditMode} 
                      />
                    </Grid>
     <Grid item xs={12} sm={2}>                    
                   <FormControl fullWidth variant="outlined" sx={{ width: '100%', height: '100%' }}>
                        <InputLabel sx={{ fontSize: '0.9rem', color: 'rgba(0, 0, 0, 0.6)', marginTop: '-3px' }}>Prefix</InputLabel>
                        <Select
                          name="prefix"
                          label="Prefix"
                         value={patientDetails.Patient_Title}
                         onChange={handleTitleChange}
                         sx={{ width: '100%', height: '75%' }}
                          disabled={!isEditMode} 
                        >
                          <MenuItem value=""><em>None</em></MenuItem>
                          <MenuItem value="Mr">Mr</MenuItem>
                          <MenuItem value="Mrs">Mrs</MenuItem>
                          <MenuItem value="Ms">Ms</MenuItem>
                         <MenuItem value="Miss">Miss</MenuItem>
                        </Select>
                      </FormControl>
                   </Grid>
                    <Grid item xs={12} sm={7}>
                     <TextField
                        id="name"
                        label="Name"
                        variant="outlined"                       
                        value={patientDetails.Patient_Name || ''}
                        onChange={(e) => {
                         setPatientDetails({ ...patientDetails, Patient_Name: e.target.value });
                         setErrors((prevErrors) => ({ ...prevErrors, Patient_Name: '' }));
                       }}
                        size="small"
                        fullWidth
                        InputLabelProps={{ style: { fontSize: '14px' } }}
                        disabled={!isEditMode} 
                        error={!!errors.Patient_Name}
                        // helperText={errors.Patient_Name}
                      />
                    </Grid>
                  <Grid item xs={12} sm={1}>
                       <Typography
                         style={{
                           color: 'rgba(0, 0, 0, 0.6)',
                            marginBottom: '10px',
                          fontSize: '14px',
                            width: '100%',
                            marginTop: '8px'
                          }}
                        >
                          Age:
                        </Typography>
                     </Grid>                     
                     <Grid item container xs={12} sm={7} spacing={1}>
                        <Grid item xs={3}>
                         <TextField
                          id="dd"
                            label="Day"                          
                            variant="outlined"
                           size="small"
                          fullWidth
                          value={patientDetails.Patient_Agedd}                         
                          onChange={(e) => {
                           setPatientDetails({ ...patientDetails, Patient_Agedd: e.target.value });
                           setErrors((prevErrors) => ({ ...prevErrors, Patient_Age: '' }));
                         }}
                            InputLabelProps={{ style: { fontSize: '14px' } }}
                            disabled={!isEditMode} 
                            error={!!errors.Patient_Age}
                            helperText={errors.Patient_Age}
                          />
                        </Grid>
                       <Grid item xs={3}>
                          <TextField
                            id="mm"
                            label="Month"
                            variant="outlined"
                            size="small"
                            fullWidth
                           value={patientDetails.Patient_Agemm}
                           onChange={(e) => {
                             setPatientDetails({ ...patientDetails, Patient_Agemm: e.target.value });
                             setErrors((prevErrors) => ({ ...prevErrors, Patient_Age: '' }));
                           }}
                            InputLabelProps={{ style: { fontSize: '14px' } }}
                            disabled={!isEditMode} 
                            error={!!errors.Patient_Age}
                            helperText={errors.Patient_Age}
                          />
                        </Grid>
                        <Grid item xs={3}>
                          <TextField
                            id="yyyy"
                            label="Year"
                            variant="outlined"
                            size="small"
                            value={patientDetails.Patient_Ageyy}
                            onChange={(e) => {
                             setPatientDetails({ ...patientDetails, Patient_Ageyy: e.target.value });
                             setErrors((prevErrors) => ({ ...prevErrors, Patient_Age: '' }));
                           }}
                            fullWidth
                            InputLabelProps={{ style: { fontSize: '14px' } }}
                            disabled={!isEditMode} 
                            error={!!errors.Patient_Age}
                            helperText={errors.Patient_Age}
                         />
                        </Grid>
                        <Grid item xs={12} sm={3}>
                       <FormControl variant="outlined" size="small" fullWidth>
                          <InputLabel id="genderLabel">Gender</InputLabel>
                          <Select
                            labelId="genderLabel"
                            id="gender"
                            label="Gender"
                            value={patientDetails.Patient_Ismale}
                            InputProps={{
                              readOnly: true,
                            }}
                           //  onChange={(e) => {
                           //   setPatientDetails({ ...patientDetails, Patient_Ismale: e.target.value });
                           //   setErrors((prevErrors) => ({ ...prevErrors, Patient_Ismale: '' }));
                           // }}
                            disabled={!isEditMode} 
                            error={!!errors.Patient_Ismale}
                          >
                            <MenuItem value=""><em>None</em></MenuItem>
                           <MenuItem value="Male">Male</MenuItem>
                           <MenuItem value="Female">Female</MenuItem>
                            <MenuItem value="Other">Other</MenuItem>
                          </Select>
                          {errors.Patient_Ismale && (
                       <Typography variant="caption" color="error">
                         {errors.Patient_Ismale}
                       </Typography>
                     )}
                        </FormControl>
                      </Grid>
                      </Grid>
                       <Grid item xs={12} sm={4}>
                     <TextField
                     id="dob"
                       label="Date of Birth"
                      type="date"
                       variant="outlined"
                      size="small"
                       fullWidth
                       value={patientDetails.Patient_Dob ? patientDetails.Patient_Dob.split('T')[0] : ''}
                      onChange={(e) => {
                     const dob = e.target.value;
                     setPatientDetails({ ...patientDetails, Patient_Dob: dob });
                       calculateAge(dob); // Update age fields
                       }}
                        InputLabelProps={{ shrink: true, style: { fontSize: '14px' } }}
                      disabled={!isEditMode} 
                     />
              </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      id="phone1"
                      label="Phone1"
                      variant="outlined"
                     size="small"
                      value={patientDetails.Patient_Phno}
                      onChange={(e) => {
                       setPatientDetails({ ...patientDetails, Patient_Phno: e.target.value });
                       setErrors((prevErrors) => ({ ...prevErrors, Patient_Phno: '' }));
                     }}
                      fullWidth
                     InputLabelProps={{ style: { fontSize: '14px' } }}
                     disabled={!isEditMode} 
                      error={!!errors.Patient_Phno}
                       helperText={errors.Patient_Phno}
                    />
                 </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      id="phone2"
                      label="Phone2"
                      variant="outlined"
                      size="small"
                      value={patientDetails.Patient_mobile}
                     onChange={(e) => {
                       setPatientDetails({ ...patientDetails, Patient_mobile: e.target.value });
                       setErrors((prevErrors) => ({ ...prevErrors, Patient_mobile: '' }));
                     }}
                      fullWidth
                      InputLabelProps={{ style: { fontSize: '14px' } }}
                      disabled={!isEditMode} 
                      error={!!errors.Patient_mobile}
                       helperText={errors.Patient_mobile}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      id="email"
                      label="Email"
                      variant="outlined"
                      size="small"
                      value={patientDetails.Patient_Email}
                      onChange={(e) => {
                       setPatientDetails({ ...patientDetails, Patient_Email: e.target.value });
                       setErrors((prevErrors) => ({ ...prevErrors, Patient_Email: '' }));
                     }}
                      fullWidth
                      InputLabelProps={{ style: { fontSize: '14px' } }}
                      disabled={!isEditMode} 
                      error={!!errors.Patient_Email}
                      helperText={errors.Patient_Email}
                    />
                  </Grid>
                 <Grid item xs={12}>
                    <TextField
                      id="address"
                      label="Address"
                      variant="outlined"
                     size="small"
                      value={patientDetails.Patient_Address}
                      onChange={(e)=>setPatientDetails({...patientDetails, Patient_Address: e.target.value})}
                      fullWidth
                      InputLabelProps={{ style: { fontSize: '14px' } }}
                      disabled={!isEditMode} 
                    />
                 </Grid>
              
                 </Grid>
                )}
   <Grid container spacing={2} justifyContent="flex-end">
    <Grid item>
      {!isEditMode ? (
        <Button
          variant="contained"
          color="primary"
          onClick={() => setIsEditMode(true)}
          sx={{ marginTop: 2 }} // Adds margin top
        >
          Edit
        </Button>
      ) : (
        <>
         <Button
           variant="contained"
            onClick={() => setIsEditMode(false)}
            sx={{ marginTop: 2, marginRight: 1 }} 
         >
           Cancel
          </Button>
         <Button
            variant="contained"
            color="primary"
            onClick={handleSaveOrUpdate}
            sx={{ marginTop: 2 }} 
          >
            Save
          </Button>
          <Button
            variant="contained"
            color="primary"
            onClick={resetForm}
            sx={{ marginTop: 2, marginLeft: 2 }} 
         >
            NEW
         </Button>
        </>
      )}
    </Grid>
  </Grid>

             </Container>
             {/* <ToastContainer/> */}
              <ToastContainer position="top-center" autoClose={3000} hideProgressBar />
            </div>
          </CCard>
        </>
      );
    };

 export default Patient;






   

